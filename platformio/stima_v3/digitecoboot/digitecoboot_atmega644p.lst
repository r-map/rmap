
digitecoboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000fe9c  00000f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9c  0000f000  0000f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012f  0080010e  0080010e  00000f3e  2**0
                  ALLOC
  3 .stab         00000300  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000ad  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000180  00000000  00000000  00001340  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000229d  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000aea  00000000  00000000  0000375d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f94  00000000  00000000  00004247  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000016c  00000000  00000000  000051dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000759  00000000  00000000  00005348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000155c  00000000  00000000  00005aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000003a0  00000000  00000000  00006ffd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <__vectors>:
    f000:	0c 94 3e 78 	jmp	0xf07c	; 0xf07c <__ctors_end>
    f004:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f008:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f00c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f010:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f014:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f018:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f01c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f020:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f024:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f028:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f02c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f030:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f034:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f038:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f03c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f040:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f044:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f048:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f04c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f050:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f054:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f058:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f05c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f060:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f064:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f068:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f06c:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f070:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f074:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>
    f078:	0c 94 f1 7c 	jmp	0xf9e2	; 0xf9e2 <__bad_interrupt>

0000f07c <__ctors_end>:
    f07c:	11 24       	eor	r1, r1
    f07e:	1f be       	out	0x3f, r1	; 63
    f080:	cf ef       	ldi	r28, 0xFF	; 255
    f082:	d0 e1       	ldi	r29, 0x10	; 16
    f084:	de bf       	out	0x3e, r29	; 62
    f086:	cd bf       	out	0x3d, r28	; 61

0000f088 <__do_copy_data>:
    f088:	11 e0       	ldi	r17, 0x01	; 1
    f08a:	a0 e0       	ldi	r26, 0x00	; 0
    f08c:	b1 e0       	ldi	r27, 0x01	; 1
    f08e:	ec e9       	ldi	r30, 0x9C	; 156
    f090:	fe ef       	ldi	r31, 0xFE	; 254
    f092:	02 c0       	rjmp	.+4      	; 0xf098 <__do_copy_data+0x10>
    f094:	05 90       	lpm	r0, Z+
    f096:	0d 92       	st	X+, r0
    f098:	ae 30       	cpi	r26, 0x0E	; 14
    f09a:	b1 07       	cpc	r27, r17
    f09c:	d9 f7       	brne	.-10     	; 0xf094 <__do_copy_data+0xc>

0000f09e <__do_clear_bss>:
    f09e:	22 e0       	ldi	r18, 0x02	; 2
    f0a0:	ae e0       	ldi	r26, 0x0E	; 14
    f0a2:	b1 e0       	ldi	r27, 0x01	; 1
    f0a4:	01 c0       	rjmp	.+2      	; 0xf0a8 <.do_clear_bss_start>

0000f0a6 <.do_clear_bss_loop>:
    f0a6:	1d 92       	st	X+, r1

0000f0a8 <.do_clear_bss_start>:
    f0a8:	ad 33       	cpi	r26, 0x3D	; 61
    f0aa:	b2 07       	cpc	r27, r18
    f0ac:	e1 f7       	brne	.-8      	; 0xf0a6 <.do_clear_bss_loop>
    f0ae:	0e 94 5b 78 	call	0xf0b6	; 0xf0b6 <main>
    f0b2:	0c 94 4c 7f 	jmp	0xfe98	; 0xfe98 <_exit>

0000f0b6 <main>:
  UART_newline();
}
#endif

/* main program starts here */
int main(void) {
    f0b6:	cd b7       	in	r28, 0x3d	; 61
    f0b8:	de b7       	in	r29, 0x3e	; 62
    f0ba:	c0 54       	subi	r28, 0x40	; 64
    f0bc:	d1 09       	sbc	r29, r1
    f0be:	de bf       	out	0x3e, r29	; 62
    f0c0:	cd bf       	out	0x3d, r28	; 61
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  __asm__ __volatile__ ("clr __zero_reg__");
    f0c2:	11 24       	eor	r1, r1
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    f0c4:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    f0c6:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  //if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
  if (ch & (_BV(WDRF) | _BV(BORF) ))
    f0c8:	98 2f       	mov	r25, r24
    f0ca:	9c 70       	andi	r25, 0x0C	; 12
    f0cc:	11 f0       	breq	.+4      	; 0xf0d2 <main+0x1c>
      appStart(ch);
    f0ce:	0e 94 8c 7d 	call	0xfb18	; 0xfb18 <appStart>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    f0d2:	82 e0       	ldi	r24, 0x02	; 2
    f0d4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    f0d8:	88 e1       	ldi	r24, 0x18	; 24
    f0da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    f0de:	86 e0       	ldi	r24, 0x06	; 6
    f0e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    f0e4:	80 e1       	ldi	r24, 0x10	; 16
    f0e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
#endif

  // Set up watchdog to trigger after 1s
watchdogConfig(WATCHDOG_1S);
    f0ea:	8e e0       	ldi	r24, 0x0E	; 14
    f0ec:	0e 94 86 7d 	call	0xfb0c	; 0xfb0c <watchdogConfig>
{
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    f0f0:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <FatFs+0x1>
    f0f4:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <FatFs>

	BYTE n, cmd, ty, ocr[4];
	UINT tmr;


	init_spi();							/* Initialize ports to control MMC */
    f0f8:	0e 94 fe 7c 	call	0xf9fc	; 0xf9fc <init_spi>
    f0fc:	14 e6       	ldi	r17, 0x64	; 100
	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
    f0fe:	0e 94 03 7d 	call	0xfa06	; 0xfa06 <dly_100us>
    f102:	11 50       	subi	r17, 0x01	; 1
    f104:	e1 f7       	brne	.-8      	; 0xf0fe <main+0x48>
    f106:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
    f108:	0e 94 0e 7d 	call	0xfa1c	; 0xfa1c <deselect>
    f10c:	11 50       	subi	r17, 0x01	; 1
    f10e:	e1 f7       	brne	.-8      	; 0xf108 <main+0x52>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    f110:	40 e0       	ldi	r20, 0x00	; 0
    f112:	50 e0       	ldi	r21, 0x00	; 0
    f114:	ba 01       	movw	r22, r20
    f116:	80 e4       	ldi	r24, 0x40	; 64
    f118:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    f11c:	18 2f       	mov	r17, r24
    f11e:	81 30       	cpi	r24, 0x01	; 1
    f120:	09 f0       	breq	.+2      	; 0xf124 <main+0x6e>
    f122:	49 c0       	rjmp	.+146    	; 0xf1b6 <main+0x100>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    f124:	4a ea       	ldi	r20, 0xAA	; 170
    f126:	51 e0       	ldi	r21, 0x01	; 1
    f128:	60 e0       	ldi	r22, 0x00	; 0
    f12a:	70 e0       	ldi	r23, 0x00	; 0
    f12c:	88 e4       	ldi	r24, 0x48	; 72
    f12e:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    f132:	81 30       	cpi	r24, 0x01	; 1
    f134:	09 f0       	breq	.+2      	; 0xf138 <main+0x82>
    f136:	ac c0       	rjmp	.+344    	; 0xf290 <main+0x1da>
    f138:	8e 01       	movw	r16, r28
    f13a:	0f 5f       	subi	r16, 0xFF	; 255
    f13c:	1f 4f       	sbci	r17, 0xFF	; 255
    f13e:	6e 01       	movw	r12, r28
    f140:	25 e0       	ldi	r18, 0x05	; 5
    f142:	c2 0e       	add	r12, r18
    f144:	d1 1c       	adc	r13, r1
    f146:	78 01       	movw	r14, r16
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    f148:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
    f14c:	f7 01       	movw	r30, r14
    f14e:	81 93       	st	Z+, r24
    f150:	7f 01       	movw	r14, r30
    f152:	ce 16       	cp	r12, r30
    f154:	df 06       	cpc	r13, r31
    f156:	c1 f7       	brne	.-16     	; 0xf148 <main+0x92>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    f158:	8b 81       	ldd	r24, Y+3	; 0x03
    f15a:	81 30       	cpi	r24, 0x01	; 1
    f15c:	61 f5       	brne	.+88     	; 0xf1b6 <main+0x100>
    f15e:	8c 81       	ldd	r24, Y+4	; 0x04
    f160:	8a 3a       	cpi	r24, 0xAA	; 170
    f162:	49 f5       	brne	.+82     	; 0xf1b6 <main+0x100>
    f164:	70 e1       	ldi	r23, 0x10	; 16
    f166:	c7 2e       	mov	r12, r23
    f168:	77 e2       	ldi	r23, 0x27	; 39
    f16a:	d7 2e       	mov	r13, r23
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    f16c:	40 e0       	ldi	r20, 0x00	; 0
    f16e:	50 e0       	ldi	r21, 0x00	; 0
    f170:	60 e0       	ldi	r22, 0x00	; 0
    f172:	70 e4       	ldi	r23, 0x40	; 64
    f174:	89 ee       	ldi	r24, 0xE9	; 233
    f176:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    f17a:	81 11       	cpse	r24, r1
    f17c:	16 c0       	rjmp	.+44     	; 0xf1aa <main+0xf4>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    f17e:	40 e0       	ldi	r20, 0x00	; 0
    f180:	50 e0       	ldi	r21, 0x00	; 0
    f182:	ba 01       	movw	r22, r20
    f184:	8a e7       	ldi	r24, 0x7A	; 122
    f186:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    f18a:	81 11       	cpse	r24, r1
    f18c:	14 c0       	rjmp	.+40     	; 0xf1b6 <main+0x100>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    f18e:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
    f192:	f8 01       	movw	r30, r16
    f194:	81 93       	st	Z+, r24
    f196:	8f 01       	movw	r16, r30
    f198:	ee 15       	cp	r30, r14
    f19a:	ff 05       	cpc	r31, r15
    f19c:	c1 f7       	brne	.-16     	; 0xf18e <main+0xd8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    f19e:	89 81       	ldd	r24, Y+1	; 0x01
    f1a0:	1c e0       	ldi	r17, 0x0C	; 12
    f1a2:	86 fd       	sbrc	r24, 6
    f1a4:	09 c0       	rjmp	.+18     	; 0xf1b8 <main+0x102>
    f1a6:	14 e0       	ldi	r17, 0x04	; 4
    f1a8:	07 c0       	rjmp	.+14     	; 0xf1b8 <main+0x102>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    f1aa:	0e 94 03 7d 	call	0xfa06	; 0xfa06 <dly_100us>
    f1ae:	f1 e0       	ldi	r31, 0x01	; 1
    f1b0:	cf 1a       	sub	r12, r31
    f1b2:	d1 08       	sbc	r13, r1
    f1b4:	d9 f6       	brne	.-74     	; 0xf16c <main+0xb6>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
    f1b6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	CardType = ty;
    f1b8:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <CardType>
	deselect();
    f1bc:	0e 94 0e 7d 	call	0xfa1c	; 0xfa1c <deselect>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    f1c0:	82 e0       	ldi	r24, 0x02	; 2
    f1c2:	90 e0       	ldi	r25, 0x00	; 0
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    f1c4:	11 23       	and	r17, r17
    f1c6:	e9 f0       	breq	.+58     	; 0xf202 <main+0x14c>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    f1c8:	40 e0       	ldi	r20, 0x00	; 0
    f1ca:	50 e0       	ldi	r21, 0x00	; 0
    f1cc:	ba 01       	movw	r22, r20
    f1ce:	ce 01       	movw	r24, r28
    f1d0:	01 96       	adiw	r24, 0x01	; 1
    f1d2:	0e 94 42 7e 	call	0xfc84	; 0xfc84 <check_fs>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
    f1d6:	c1 2c       	mov	r12, r1
    f1d8:	d1 2c       	mov	r13, r1
    f1da:	76 01       	movw	r14, r12
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    f1dc:	81 30       	cpi	r24, 0x01	; 1
    f1de:	09 f0       	breq	.+2      	; 0xf1e2 <main+0x12c>
    f1e0:	8f c0       	rjmp	.+286    	; 0xf300 <main+0x24a>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    f1e2:	00 e1       	ldi	r16, 0x10	; 16
    f1e4:	10 e0       	ldi	r17, 0x00	; 0
    f1e6:	2e eb       	ldi	r18, 0xBE	; 190
    f1e8:	31 e0       	ldi	r19, 0x01	; 1
    f1ea:	40 e0       	ldi	r20, 0x00	; 0
    f1ec:	50 e0       	ldi	r21, 0x00	; 0
    f1ee:	ba 01       	movw	r22, r20
    f1f0:	ce 01       	movw	r24, r28
    f1f2:	01 96       	adiw	r24, 0x01	; 1
    f1f4:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
    f1f8:	89 2b       	or	r24, r25
    f1fa:	09 f4       	brne	.+2      	; 0xf1fe <main+0x148>
    f1fc:	71 c0       	rjmp	.+226    	; 0xf2e0 <main+0x22a>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    f1fe:	81 e0       	ldi	r24, 0x01	; 1
    f200:	90 e0       	ldi	r25, 0x00	; 0
void checkFile() {
  uint8_t fresult;

	fresult = pf_mount(&Fatfs);	/* Initialize file system */

	if (fresult != FR_OK) { /* File System could not be mounted */
    f202:	89 2b       	or	r24, r25
    f204:	09 f0       	breq	.+2      	; 0xf208 <main+0x152>
    f206:	6c c1       	rjmp	.+728    	; 0xf4e0 <main+0x42a>
)
{
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    f208:	e0 90 3a 02 	lds	r14, 0x023A	; 0x80023a <FatFs>
    f20c:	f0 90 3b 02 	lds	r15, 0x023B	; 0x80023b <FatFs+0x1>


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    f210:	45 e0       	ldi	r20, 0x05	; 5
    f212:	c4 2e       	mov	r12, r20
    f214:	d1 2c       	mov	r13, r1
    f216:	e1 14       	cp	r14, r1
    f218:	f1 04       	cpc	r15, r1
    f21a:	09 f4       	brne	.+2      	; 0xf21e <main+0x168>
    f21c:	3e c1       	rjmp	.+636    	; 0xf49a <main+0x3e4>

	fs->flag = 0;
    f21e:	f7 01       	movw	r30, r14
    f220:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    f222:	ce 01       	movw	r24, r28
    f224:	c5 96       	adiw	r24, 0x35	; 53
    f226:	98 a7       	std	Y+40, r25	; 0x28
    f228:	8f a3       	std	Y+39, r24	; 0x27
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
	if (*path == '/') path++;			/* Strip heading separator if exist */
	dj->sclust = 0;						/* Set start directory (always root dir) */
    f22a:	19 a6       	std	Y+41, r1	; 0x29
    f22c:	1a a6       	std	Y+42, r1	; 0x2a
    f22e:	1b a6       	std	Y+43, r1	; 0x2b
    f230:	1c a6       	std	Y+44, r1	; 0x2c
    f232:	10 e0       	ldi	r17, 0x00	; 0
    f234:	a1 2e       	mov	r10, r17
    f236:	11 e0       	ldi	r17, 0x01	; 1
    f238:	b1 2e       	mov	r11, r17

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    f23a:	00 e2       	ldi	r16, 0x20	; 32
    f23c:	90 2e       	mov	r9, r16
    f23e:	af a1       	ldd	r26, Y+39	; 0x27
    f240:	b8 a5       	ldd	r27, Y+40	; 0x28
    f242:	fd 01       	movw	r30, r26
    f244:	cd 01       	movw	r24, r26
    f246:	0b 96       	adiw	r24, 0x0b	; 11
    f248:	8e 17       	cp	r24, r30
    f24a:	9f 07       	cpc	r25, r31
    f24c:	09 f0       	breq	.+2      	; 0xf250 <main+0x19a>
    f24e:	fb c0       	rjmp	.+502    	; 0xf446 <main+0x390>
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
    f250:	20 e0       	ldi	r18, 0x00	; 0
    f252:	e0 e0       	ldi	r30, 0x00	; 0
    f254:	88 e0       	ldi	r24, 0x08	; 8
	p = *path;
	for (;;) {
		c = p[si++];
    f256:	31 e0       	ldi	r19, 0x01	; 1
    f258:	3e 0f       	add	r19, r30
    f25a:	ea 0d       	add	r30, r10
    f25c:	fb 2d       	mov	r31, r11
    f25e:	f1 1d       	adc	r31, r1
    f260:	90 81       	ld	r25, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    f262:	91 32       	cpi	r25, 0x21	; 33
    f264:	08 f4       	brcc	.+2      	; 0xf268 <main+0x1b2>
    f266:	f1 c0       	rjmp	.+482    	; 0xf44a <main+0x394>
    f268:	9f 32       	cpi	r25, 0x2F	; 47
    f26a:	09 f4       	brne	.+2      	; 0xf26e <main+0x1b8>
    f26c:	ee c0       	rjmp	.+476    	; 0xf44a <main+0x394>
		if (c == '.' || i >= ni) {
    f26e:	9e 32       	cpi	r25, 0x2E	; 46
    f270:	09 f4       	brne	.+2      	; 0xf274 <main+0x1be>
    f272:	85 c3       	rjmp	.+1802   	; 0xf97e <main+0x8c8>
    f274:	28 17       	cp	r18, r24
    f276:	08 f0       	brcs	.+2      	; 0xf27a <main+0x1c4>
    f278:	e8 c0       	rjmp	.+464    	; 0xf44a <main+0x394>
			sfn[i++] = d;
		} else
#endif
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
    f27a:	fd 01       	movw	r30, r26
    f27c:	e2 0f       	add	r30, r18
    f27e:	f1 1d       	adc	r31, r1
    f280:	90 83       	st	Z, r25
    f282:	98 2f       	mov	r25, r24
    f284:	81 e0       	ldi	r24, 0x01	; 1
    f286:	82 0f       	add	r24, r18
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    f288:	28 2f       	mov	r18, r24
    f28a:	e3 2f       	mov	r30, r19
    f28c:	89 2f       	mov	r24, r25
    f28e:	e3 cf       	rjmp	.-58     	; 0xf256 <main+0x1a0>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    f290:	40 e0       	ldi	r20, 0x00	; 0
    f292:	50 e0       	ldi	r21, 0x00	; 0
    f294:	ba 01       	movw	r22, r20
    f296:	89 ee       	ldi	r24, 0xE9	; 233
    f298:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    f29c:	01 e4       	ldi	r16, 0x41	; 65
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    f29e:	82 30       	cpi	r24, 0x02	; 2
    f2a0:	10 f4       	brcc	.+4      	; 0xf2a6 <main+0x1f0>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    f2a2:	12 e0       	ldi	r17, 0x02	; 2
    f2a4:	09 ee       	ldi	r16, 0xE9	; 233
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    f2a6:	60 e1       	ldi	r22, 0x10	; 16
    f2a8:	e6 2e       	mov	r14, r22
    f2aa:	67 e2       	ldi	r22, 0x27	; 39
    f2ac:	f6 2e       	mov	r15, r22
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    f2ae:	40 e0       	ldi	r20, 0x00	; 0
    f2b0:	50 e0       	ldi	r21, 0x00	; 0
    f2b2:	ba 01       	movw	r22, r20
    f2b4:	80 2f       	mov	r24, r16
    f2b6:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    f2ba:	81 11       	cpse	r24, r1
    f2bc:	0a c0       	rjmp	.+20     	; 0xf2d2 <main+0x21c>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    f2be:	40 e0       	ldi	r20, 0x00	; 0
    f2c0:	52 e0       	ldi	r21, 0x02	; 2
    f2c2:	60 e0       	ldi	r22, 0x00	; 0
    f2c4:	70 e0       	ldi	r23, 0x00	; 0
    f2c6:	80 e5       	ldi	r24, 0x50	; 80
    f2c8:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    f2cc:	81 11       	cpse	r24, r1
    f2ce:	73 cf       	rjmp	.-282    	; 0xf1b6 <main+0x100>
    f2d0:	73 cf       	rjmp	.-282    	; 0xf1b8 <main+0x102>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    f2d2:	0e 94 03 7d 	call	0xfa06	; 0xfa06 <dly_100us>
    f2d6:	f1 e0       	ldi	r31, 0x01	; 1
    f2d8:	ef 1a       	sub	r14, r31
    f2da:	f1 08       	sbc	r15, r1
    f2dc:	41 f7       	brne	.-48     	; 0xf2ae <main+0x1f8>
    f2de:	6b cf       	rjmp	.-298    	; 0xf1b6 <main+0x100>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    f2e0:	8d 81       	ldd	r24, Y+5	; 0x05
    f2e2:	81 11       	cpse	r24, r1
    f2e4:	03 c0       	rjmp	.+6      	; 0xf2ec <main+0x236>
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    f2e6:	86 e0       	ldi	r24, 0x06	; 6
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	8b cf       	rjmp	.-234    	; 0xf202 <main+0x14c>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    f2ec:	c9 84       	ldd	r12, Y+9	; 0x09
    f2ee:	da 84       	ldd	r13, Y+10	; 0x0a
    f2f0:	eb 84       	ldd	r14, Y+11	; 0x0b
    f2f2:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    f2f4:	b7 01       	movw	r22, r14
    f2f6:	a6 01       	movw	r20, r12
    f2f8:	ce 01       	movw	r24, r28
    f2fa:	01 96       	adiw	r24, 0x01	; 1
    f2fc:	0e 94 42 7e 	call	0xfc84	; 0xfc84 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    f300:	83 30       	cpi	r24, 0x03	; 3
    f302:	09 f4       	brne	.+2      	; 0xf306 <main+0x250>
    f304:	7c cf       	rjmp	.-264    	; 0xf1fe <main+0x148>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    f306:	81 11       	cpse	r24, r1
    f308:	ee cf       	rjmp	.-36     	; 0xf2e6 <main+0x230>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    f30a:	04 e2       	ldi	r16, 0x24	; 36
    f30c:	10 e0       	ldi	r17, 0x00	; 0
    f30e:	2d e0       	ldi	r18, 0x0D	; 13
    f310:	30 e0       	ldi	r19, 0x00	; 0
    f312:	b7 01       	movw	r22, r14
    f314:	a6 01       	movw	r20, r12
    f316:	ce 01       	movw	r24, r28
    f318:	01 96       	adiw	r24, 0x01	; 1
    f31a:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
    f31e:	89 2b       	or	r24, r25
    f320:	09 f0       	breq	.+2      	; 0xf324 <main+0x26e>
    f322:	6d cf       	rjmp	.-294    	; 0xf1fe <main+0x148>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    f324:	2a 85       	ldd	r18, Y+10	; 0x0a
    f326:	3b 85       	ldd	r19, Y+11	; 0x0b
    f328:	50 e0       	ldi	r21, 0x00	; 0
    f32a:	40 e0       	ldi	r20, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    f32c:	21 15       	cp	r18, r1
    f32e:	31 05       	cpc	r19, r1
    f330:	41 05       	cpc	r20, r1
    f332:	51 05       	cpc	r21, r1
    f334:	21 f4       	brne	.+8      	; 0xf33e <main+0x288>
    f336:	28 8d       	ldd	r18, Y+24	; 0x18
    f338:	39 8d       	ldd	r19, Y+25	; 0x19
    f33a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    f33c:	5b 8d       	ldd	r21, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    f33e:	ac 81       	ldd	r26, Y+4	; 0x04
    f340:	b0 e0       	ldi	r27, 0x00	; 0
    f342:	0e 94 fb 7e 	call	0xfdf6	; 0xfdf6 <__muluhisi3>
    f346:	4b 01       	movw	r8, r22
    f348:	5c 01       	movw	r10, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    f34a:	0a 81       	ldd	r16, Y+2	; 0x02
    f34c:	1b 81       	ldd	r17, Y+3	; 0x03
    f34e:	30 e0       	ldi	r19, 0x00	; 0
    f350:	20 e0       	ldi	r18, 0x00	; 0
    f352:	c0 0e       	add	r12, r16
    f354:	d1 1e       	adc	r13, r17
    f356:	e2 1e       	adc	r14, r18
    f358:	f3 1e       	adc	r15, r19
    f35a:	c0 92 1a 02 	sts	0x021A, r12	; 0x80021a <Fatfs+0xa>
    f35e:	d0 92 1b 02 	sts	0x021B, r13	; 0x80021b <Fatfs+0xb>
    f362:	e0 92 1c 02 	sts	0x021C, r14	; 0x80021c <Fatfs+0xc>
    f366:	f0 92 1d 02 	sts	0x021D, r15	; 0x80021d <Fatfs+0xd>
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    f36a:	49 81       	ldd	r20, Y+1	; 0x01
    f36c:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <Fatfs+0x2>
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    f370:	6d 81       	ldd	r22, Y+5	; 0x05
    f372:	7e 81       	ldd	r23, Y+6	; 0x06
    f374:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <Fatfs+0x5>
    f378:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <Fatfs+0x4>
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    f37c:	8f 81       	ldd	r24, Y+7	; 0x07
    f37e:	98 85       	ldd	r25, Y+8	; 0x08
    f380:	b0 e0       	ldi	r27, 0x00	; 0
    f382:	a0 e0       	ldi	r26, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    f384:	00 97       	sbiw	r24, 0x00	; 0
    f386:	a1 05       	cpc	r26, r1
    f388:	b1 05       	cpc	r27, r1
    f38a:	21 f4       	brne	.+8      	; 0xf394 <main+0x2de>
    f38c:	8c 89       	ldd	r24, Y+20	; 0x14
    f38e:	9d 89       	ldd	r25, Y+21	; 0x15
    f390:	ae 89       	ldd	r26, Y+22	; 0x16
    f392:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    f394:	54 e0       	ldi	r21, 0x04	; 4
    f396:	76 95       	lsr	r23
    f398:	67 95       	ror	r22
    f39a:	5a 95       	dec	r21
    f39c:	e1 f7       	brne	.-8      	; 0xf396 <main+0x2e0>
    f39e:	2b 01       	movw	r4, r22
    f3a0:	71 2c       	mov	r7, r1
    f3a2:	61 2c       	mov	r6, r1
    f3a4:	80 1b       	sub	r24, r16
    f3a6:	91 0b       	sbc	r25, r17
    f3a8:	a2 0b       	sbc	r26, r18
    f3aa:	b3 0b       	sbc	r27, r19
    f3ac:	bc 01       	movw	r22, r24
    f3ae:	cd 01       	movw	r24, r26
    f3b0:	68 19       	sub	r22, r8
    f3b2:	79 09       	sbc	r23, r9
    f3b4:	8a 09       	sbc	r24, r10
    f3b6:	9b 09       	sbc	r25, r11
    f3b8:	64 19       	sub	r22, r4
    f3ba:	75 09       	sbc	r23, r5
    f3bc:	86 09       	sbc	r24, r6
    f3be:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
    f3c0:	24 2f       	mov	r18, r20
    f3c2:	30 e0       	ldi	r19, 0x00	; 0
    f3c4:	50 e0       	ldi	r21, 0x00	; 0
    f3c6:	40 e0       	ldi	r20, 0x00	; 0
    f3c8:	0e 94 d9 7e 	call	0xfdb2	; 0xfdb2 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    f3cc:	da 01       	movw	r26, r20
    f3ce:	c9 01       	movw	r24, r18
    f3d0:	02 96       	adiw	r24, 0x02	; 2
    f3d2:	a1 1d       	adc	r26, r1
    f3d4:	b1 1d       	adc	r27, r1
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    f3d6:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <Fatfs+0x6>
    f3da:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <Fatfs+0x7>
    f3de:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <Fatfs+0x8>
    f3e2:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <Fatfs+0x9>
	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
    f3e6:	87 3f       	cpi	r24, 0xF7	; 247
    f3e8:	9f 4f       	sbci	r25, 0xFF	; 255
    f3ea:	a1 05       	cpc	r26, r1
    f3ec:	b1 05       	cpc	r27, r1
    f3ee:	08 f4       	brcc	.+2      	; 0xf3f2 <main+0x33c>
    f3f0:	7a cf       	rjmp	.-268    	; 0xf2e6 <main+0x230>
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
    f3f2:	83 e0       	ldi	r24, 0x03	; 3
    f3f4:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Fatfs>

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    f3f8:	88 a1       	ldd	r24, Y+32	; 0x20
    f3fa:	99 a1       	ldd	r25, Y+33	; 0x21
    f3fc:	aa a1       	ldd	r26, Y+34	; 0x22
    f3fe:	bb a1       	ldd	r27, Y+35	; 0x23
    f400:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Fatfs+0xe>
    f404:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <Fatfs+0xf>
    f408:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <Fatfs+0x10>
    f40c:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <Fatfs+0x11>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    f410:	c4 0c       	add	r12, r4
    f412:	d5 1c       	adc	r13, r5
    f414:	e6 1c       	adc	r14, r6
    f416:	f7 1c       	adc	r15, r7
    f418:	8c 0c       	add	r8, r12
    f41a:	9d 1c       	adc	r9, r13
    f41c:	ae 1c       	adc	r10, r14
    f41e:	bf 1c       	adc	r11, r15
    f420:	80 92 22 02 	sts	0x0222, r8	; 0x800222 <Fatfs+0x12>
    f424:	90 92 23 02 	sts	0x0223, r9	; 0x800223 <Fatfs+0x13>
    f428:	a0 92 24 02 	sts	0x0224, r10	; 0x800224 <Fatfs+0x14>
    f42c:	b0 92 25 02 	sts	0x0225, r11	; 0x800225 <Fatfs+0x15>

	fs->flag = 0;
    f430:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <Fatfs+0x1>
	FatFs = fs;
    f434:	80 e1       	ldi	r24, 0x10	; 16
    f436:	92 e0       	ldi	r25, 0x02	; 2
    f438:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <FatFs+0x1>
    f43c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <FatFs>

	return FR_OK;
    f440:	90 e0       	ldi	r25, 0x00	; 0
    f442:	80 e0       	ldi	r24, 0x00	; 0
    f444:	de ce       	rjmp	.-580    	; 0xf202 <main+0x14c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    f446:	91 92       	st	Z+, r9
    f448:	ff ce       	rjmp	.-514    	; 0xf248 <main+0x192>
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    f44a:	a3 0e       	add	r10, r19
    f44c:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    f44e:	81 e0       	ldi	r24, 0x01	; 1
    f450:	91 32       	cpi	r25, 0x21	; 33
    f452:	08 f0       	brcs	.+2      	; 0xf456 <main+0x3a0>
    f454:	80 e0       	ldi	r24, 0x00	; 0
    f456:	1b 96       	adiw	r26, 0x0b	; 11
    f458:	8c 93       	st	X, r24
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    f45a:	ce 01       	movw	r24, r28
    f45c:	85 96       	adiw	r24, 0x25	; 37
    f45e:	0e 94 48 7d 	call	0xfa90	; 0xfa90 <dir_rewind>
    f462:	6c 01       	movw	r12, r24
	if (res != FR_OK) return res;
    f464:	89 2b       	or	r24, r25
    f466:	c9 f4       	brne	.+50     	; 0xf49a <main+0x3e4>

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    f468:	2d a1       	ldd	r18, Y+37	; 0x25
    f46a:	3e a1       	ldd	r19, Y+38	; 0x26
    f46c:	2f 70       	andi	r18, 0x0F	; 15
    f46e:	33 27       	eor	r19, r19
    f470:	b5 e0       	ldi	r27, 0x05	; 5
    f472:	22 0f       	add	r18, r18
    f474:	33 1f       	adc	r19, r19
    f476:	ba 95       	dec	r27
    f478:	e1 f7       	brne	.-8      	; 0xf472 <main+0x3bc>
    f47a:	49 a9       	ldd	r20, Y+49	; 0x31
    f47c:	5a a9       	ldd	r21, Y+50	; 0x32
    f47e:	6b a9       	ldd	r22, Y+51	; 0x33
    f480:	7c a9       	ldd	r23, Y+52	; 0x34
    f482:	00 e2       	ldi	r16, 0x20	; 32
    f484:	10 e0       	ldi	r17, 0x00	; 0
    f486:	ce 01       	movw	r24, r28
    f488:	01 96       	adiw	r24, 0x01	; 1
    f48a:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    f48e:	89 2b       	or	r24, r25
    f490:	09 f4       	brne	.+2      	; 0xf494 <main+0x3de>
    f492:	47 c0       	rjmp	.+142    	; 0xf522 <main+0x46c>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    f494:	cc 24       	eor	r12, r12
    f496:	c3 94       	inc	r12
    f498:	d1 2c       	mov	r13, r1
  	return;
	}

  fresult = pf_open(filename);

	if (fresult != FR_OK) { /* File could not be opened */
    f49a:	c1 10       	cpse	r12, r1
    f49c:	21 c0       	rjmp	.+66     	; 0xf4e0 <main+0x42a>
    watchdogReset();
		_delay_ms(100);
	}
  #endif

	for (address = 0; address < BOOT_ADR; address += SPM_PAGESIZE) {	/* Update all application pages */
    f49e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <address+0x1>
    f4a2:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <address>
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    f4a6:	41 2c       	mov	r4, r1
    f4a8:	82 e0       	ldi	r24, 0x02	; 2
    f4aa:	58 2e       	mov	r5, r24
    f4ac:	9e e0       	ldi	r25, 0x0E	; 14
    f4ae:	69 2e       	mov	r6, r25
    f4b0:	92 e0       	ldi	r25, 0x02	; 2
    f4b2:	79 2e       	mov	r7, r25
	{
		// Set up little-endian word.
		uint16_t w = *((uint16_t*)(pagebuffer + i));
		boot_page_fill (address + i, w);
	}
	boot_page_write(address);   // Store buffer in flash page.
    f4b4:	25 e0       	ldi	r18, 0x05	; 5
    f4b6:	32 2e       	mov	r3, r18
	boot_spm_busy_wait();       // Wait until the memory is written.

	boot_rww_enable ();
    f4b8:	31 e1       	ldi	r19, 0x11	; 17
    f4ba:	23 2e       	mov	r2, r19
    watchdogReset();
		_delay_ms(100);
	}
  #endif

	for (address = 0; address < BOOT_ADR; address += SPM_PAGESIZE) {	/* Update all application pages */
    f4bc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <address>
    f4c0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <address+0x1>
    f4c4:	81 15       	cp	r24, r1
    f4c6:	90 4f       	sbci	r25, 0xF0	; 240
    f4c8:	08 f4       	brcc	.+2      	; 0xf4cc <main+0x416>
    f4ca:	e6 c0       	rjmp	.+460    	; 0xf698 <main+0x5e2>
			_delay_ms(50);
		}
  #endif

  // Start APP If Upgraded
  if (pgm_read_word(0) != 0xFFFF) ((void(*)(void))0)();
    f4cc:	90 e0       	ldi	r25, 0x00	; 0
    f4ce:	80 e0       	ldi	r24, 0x00	; 0
    f4d0:	fc 01       	movw	r30, r24
    f4d2:	25 91       	lpm	r18, Z+
    f4d4:	34 91       	lpm	r19, Z
    f4d6:	2f 3f       	cpi	r18, 0xFF	; 255
    f4d8:	3f 4f       	sbci	r19, 0xFF	; 255
    f4da:	11 f0       	breq	.+4      	; 0xf4e0 <main+0x42a>
    f4dc:	fc 01       	movw	r30, r24
    f4de:	09 95       	icall
{
	uint16_t i=0;

	boot_page_erase (address);
	boot_spm_busy_wait ();      // Wait until the memory is erased.
	for (i=0; i<SPM_PAGESIZE; i+=2)
    f4e0:	f1 2c       	mov	r15, r1
    f4e2:	e1 2c       	mov	r14, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    f4e4:	33 e0       	ldi	r19, 0x03	; 3
    f4e6:	73 2e       	mov	r7, r19
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    f4e8:	66 24       	eor	r6, r6
    f4ea:	63 94       	inc	r6
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    f4ec:	45 e0       	ldi	r20, 0x05	; 5
    f4ee:	54 2e       	mov	r5, r20
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    f4f0:	51 e1       	ldi	r21, 0x11	; 17
    f4f2:	45 2e       	mov	r4, r21

  /* Forever loop: exits by causing WDT reset */
  for (;;) {

    /* get character from UART */
    ch = getch();
    f4f4:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>

    if(ch == STK_GET_PARAMETER) {
    f4f8:	81 34       	cpi	r24, 0x41	; 65
    f4fa:	09 f0       	breq	.+2      	; 0xf4fe <main+0x448>
    f4fc:	88 c1       	rjmp	.+784    	; 0xf80e <main+0x758>
      unsigned char which = getch();
    f4fe:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f502:	18 2f       	mov	r17, r24
      verifySpace();
    f504:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
	  putch(optiboot_version & 0xFF);
    f508:	82 e0       	ldi	r24, 0x02	; 2
      verifySpace();
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    f50a:	12 38       	cpi	r17, 0x82	; 130
    f50c:	21 f0       	breq	.+8      	; 0xf516 <main+0x460>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    f50e:	83 e0       	ldi	r24, 0x03	; 3
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
	  putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    f510:	11 38       	cpi	r17, 0x81	; 129
    f512:	09 f4       	brne	.+2      	; 0xf516 <main+0x460>
	  putch(optiboot_version >> 8);
    f514:	86 e0       	ldi	r24, 0x06	; 6
    f516:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
    f51a:	80 e1       	ldi	r24, 0x10	; 16
    f51c:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
    f520:	e9 cf       	rjmp	.-46     	; 0xf4f4 <main+0x43e>
	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    f522:	89 81       	ldd	r24, Y+1	; 0x01
    f524:	81 11       	cpse	r24, r1
    f526:	04 c0       	rjmp	.+8      	; 0xf530 <main+0x47a>
    f528:	f3 e0       	ldi	r31, 0x03	; 3
    f52a:	cf 2e       	mov	r12, r31
    f52c:	d1 2c       	mov	r13, r1
    f52e:	b5 cf       	rjmp	.-150    	; 0xf49a <main+0x3e4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    f530:	8c 85       	ldd	r24, Y+12	; 0x0c
    f532:	83 fd       	sbrc	r24, 3
    f534:	13 c0       	rjmp	.+38     	; 0xf55c <main+0x4a6>
    f536:	0f a1       	ldd	r16, Y+39	; 0x27
    f538:	18 a5       	ldd	r17, Y+40	; 0x28
    f53a:	9e 01       	movw	r18, r28
    f53c:	2f 5f       	subi	r18, 0xFF	; 255
    f53e:	3f 4f       	sbci	r19, 0xFF	; 255
    f540:	d8 01       	movw	r26, r16
    f542:	b8 01       	movw	r22, r16
    f544:	65 5f       	subi	r22, 0xF5	; 245
    f546:	7f 4f       	sbci	r23, 0xFF	; 255
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    f548:	a6 17       	cp	r26, r22
    f54a:	b7 07       	cpc	r27, r23
    f54c:	09 f4       	brne	.+2      	; 0xf550 <main+0x49a>
    f54e:	64 c0       	rjmp	.+200    	; 0xf618 <main+0x562>
    f550:	f9 01       	movw	r30, r18
    f552:	41 91       	ld	r20, Z+
    f554:	9f 01       	movw	r18, r30
    f556:	9d 91       	ld	r25, X+
    f558:	49 17       	cp	r20, r25
    f55a:	b1 f3       	breq	.-20     	; 0xf548 <main+0x492>
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
    f55c:	6d a0       	ldd	r6, Y+37	; 0x25
    f55e:	7e a0       	ldd	r7, Y+38	; 0x26
    f560:	ff ef       	ldi	r31, 0xFF	; 255
    f562:	6f 1a       	sub	r6, r31
    f564:	7f 0a       	sbc	r7, r31
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    f566:	01 f3       	breq	.-64     	; 0xf528 <main+0x472>
    f568:	89 a9       	ldd	r24, Y+49	; 0x31
    f56a:	9a a9       	ldd	r25, Y+50	; 0x32
    f56c:	ab a9       	ldd	r26, Y+51	; 0x33
    f56e:	bc a9       	ldd	r27, Y+52	; 0x34
    f570:	00 97       	sbiw	r24, 0x00	; 0
    f572:	a1 05       	cpc	r26, r1
    f574:	b1 05       	cpc	r27, r1
    f576:	c1 f2       	breq	.-80     	; 0xf528 <main+0x472>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    f578:	93 01       	movw	r18, r6
    f57a:	2f 70       	andi	r18, 0x0F	; 15
    f57c:	33 27       	eor	r19, r19
    f57e:	23 2b       	or	r18, r19
    f580:	d9 f4       	brne	.+54     	; 0xf5b8 <main+0x502>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    f582:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <FatFs>
    f586:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <FatFs+0x1>
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */
    f58a:	01 96       	adiw	r24, 0x01	; 1
    f58c:	a1 1d       	adc	r26, r1
    f58e:	b1 1d       	adc	r27, r1
    f590:	89 ab       	std	Y+49, r24	; 0x31
    f592:	9a ab       	std	Y+50, r25	; 0x32
    f594:	ab ab       	std	Y+51, r26	; 0x33
    f596:	bc ab       	std	Y+52, r27	; 0x34

		if (dj->clust == 0) {	/* Static table */
    f598:	6d a5       	ldd	r22, Y+45	; 0x2d
    f59a:	7e a5       	ldd	r23, Y+46	; 0x2e
    f59c:	8f a5       	ldd	r24, Y+47	; 0x2f
    f59e:	98 a9       	ldd	r25, Y+48	; 0x30
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    f5a0:	f8 01       	movw	r30, r16
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
    f5a2:	61 15       	cp	r22, r1
    f5a4:	71 05       	cpc	r23, r1
    f5a6:	81 05       	cpc	r24, r1
    f5a8:	91 05       	cpc	r25, r1
    f5aa:	49 f4       	brne	.+18     	; 0xf5be <main+0x508>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    f5ac:	84 81       	ldd	r24, Z+4	; 0x04
    f5ae:	95 81       	ldd	r25, Z+5	; 0x05
    f5b0:	68 16       	cp	r6, r24
    f5b2:	79 06       	cpc	r7, r25
    f5b4:	08 f0       	brcs	.+2      	; 0xf5b8 <main+0x502>
    f5b6:	b8 cf       	rjmp	.-144    	; 0xf528 <main+0x472>
				dj->sect = clust2sect(clst);
			}
		}
	}

	dj->index = i;
    f5b8:	7e a2       	std	Y+38, r7	; 0x26
    f5ba:	6d a2       	std	Y+37, r6	; 0x25
    f5bc:	55 cf       	rjmp	.-342    	; 0xf468 <main+0x3b2>
		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    f5be:	22 81       	ldd	r18, Z+2	; 0x02
    f5c0:	e2 2f       	mov	r30, r18
    f5c2:	e1 50       	subi	r30, 0x01	; 1
    f5c4:	ff 0b       	sbc	r31, r31
    f5c6:	af 01       	movw	r20, r30
    f5c8:	93 01       	movw	r18, r6
    f5ca:	e4 e0       	ldi	r30, 0x04	; 4
    f5cc:	36 95       	lsr	r19
    f5ce:	27 95       	ror	r18
    f5d0:	ea 95       	dec	r30
    f5d2:	e1 f7       	brne	.-8      	; 0xf5cc <main+0x516>
    f5d4:	24 23       	and	r18, r20
    f5d6:	35 23       	and	r19, r21
    f5d8:	23 2b       	or	r18, r19
    f5da:	71 f7       	brne	.-36     	; 0xf5b8 <main+0x502>
				clst = get_fat(dj->clust);		/* Get next cluster */
    f5dc:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
    f5e0:	62 30       	cpi	r22, 0x02	; 2
    f5e2:	71 05       	cpc	r23, r1
    f5e4:	81 05       	cpc	r24, r1
    f5e6:	91 05       	cpc	r25, r1
    f5e8:	08 f4       	brcc	.+2      	; 0xf5ec <main+0x536>
    f5ea:	54 cf       	rjmp	.-344    	; 0xf494 <main+0x3de>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    f5ec:	f8 01       	movw	r30, r16
    f5ee:	06 81       	ldd	r16, Z+6	; 0x06
    f5f0:	17 81       	ldd	r17, Z+7	; 0x07
    f5f2:	20 85       	ldd	r18, Z+8	; 0x08
    f5f4:	31 85       	ldd	r19, Z+9	; 0x09
    f5f6:	60 17       	cp	r22, r16
    f5f8:	71 07       	cpc	r23, r17
    f5fa:	82 07       	cpc	r24, r18
    f5fc:	93 07       	cpc	r25, r19
    f5fe:	08 f0       	brcs	.+2      	; 0xf602 <main+0x54c>
    f600:	93 cf       	rjmp	.-218    	; 0xf528 <main+0x472>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    f602:	6d a7       	std	Y+45, r22	; 0x2d
    f604:	7e a7       	std	Y+46, r23	; 0x2e
    f606:	8f a7       	std	Y+47, r24	; 0x2f
    f608:	98 ab       	std	Y+48, r25	; 0x30
				dj->sect = clust2sect(clst);
    f60a:	0e 94 1d 7d 	call	0xfa3a	; 0xfa3a <clust2sect>
    f60e:	69 ab       	std	Y+49, r22	; 0x31
    f610:	7a ab       	std	Y+50, r23	; 0x32
    f612:	8b ab       	std	Y+51, r24	; 0x33
    f614:	9c ab       	std	Y+52, r25	; 0x34
    f616:	d0 cf       	rjmp	.-96     	; 0xf5b8 <main+0x502>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    f618:	f8 01       	movw	r30, r16
    f61a:	93 85       	ldd	r25, Z+11	; 0x0b
    f61c:	80 71       	andi	r24, 0x10	; 16
    f61e:	91 11       	cpse	r25, r1
    f620:	16 c0       	rjmp	.+44     	; 0xf64e <main+0x598>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    f622:	09 f4       	brne	.+2      	; 0xf626 <main+0x570>
    f624:	81 cf       	rjmp	.-254    	; 0xf528 <main+0x472>
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
    f626:	8d 89       	ldd	r24, Y+21	; 0x15
    f628:	9e 89       	ldd	r25, Y+22	; 0x16
    f62a:	b0 e0       	ldi	r27, 0x00	; 0
    f62c:	a0 e0       	ldi	r26, 0x00	; 0
		clst <<= 16;
    f62e:	dc 01       	movw	r26, r24
    f630:	99 27       	eor	r25, r25
    f632:	88 27       	eor	r24, r24
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
    f634:	4b 8d       	ldd	r20, Y+27	; 0x1b
    f636:	5c 8d       	ldd	r21, Y+28	; 0x1c
    f638:	70 e0       	ldi	r23, 0x00	; 0
    f63a:	60 e0       	ldi	r22, 0x00	; 0
    f63c:	84 2b       	or	r24, r20
    f63e:	95 2b       	or	r25, r21
    f640:	a6 2b       	or	r26, r22
    f642:	b7 2b       	or	r27, r23
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
    f644:	89 a7       	std	Y+41, r24	; 0x29
    f646:	9a a7       	std	Y+42, r25	; 0x2a
    f648:	ab a7       	std	Y+43, r26	; 0x2b
    f64a:	bc a7       	std	Y+44, r27	; 0x2c
    f64c:	f8 cd       	rjmp	.-1040   	; 0xf23e <main+0x188>

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    f64e:	81 11       	cpse	r24, r1
    f650:	6b cf       	rjmp	.-298    	; 0xf528 <main+0x472>
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
    f652:	8d 89       	ldd	r24, Y+21	; 0x15
    f654:	9e 89       	ldd	r25, Y+22	; 0x16
    f656:	b0 e0       	ldi	r27, 0x00	; 0
    f658:	a0 e0       	ldi	r26, 0x00	; 0
		clst <<= 16;
    f65a:	dc 01       	movw	r26, r24
    f65c:	99 27       	eor	r25, r25
    f65e:	88 27       	eor	r24, r24
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
    f660:	4b 8d       	ldd	r20, Y+27	; 0x1b
    f662:	5c 8d       	ldd	r21, Y+28	; 0x1c
    f664:	70 e0       	ldi	r23, 0x00	; 0
    f666:	60 e0       	ldi	r22, 0x00	; 0
    f668:	84 2b       	or	r24, r20
    f66a:	95 2b       	or	r25, r21
    f66c:	a6 2b       	or	r26, r22
    f66e:	b7 2b       	or	r27, r23
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = get_clust(dir);		/* File start cluster */
    f670:	f7 01       	movw	r30, r14
    f672:	86 8f       	std	Z+30, r24	; 0x1e
    f674:	97 8f       	std	Z+31, r25	; 0x1f
    f676:	a0 a3       	std	Z+32, r26	; 0x20
    f678:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    f67a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f67c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    f67e:	af 8d       	ldd	r26, Y+31	; 0x1f
    f680:	b8 a1       	ldd	r27, Y+32	; 0x20
    f682:	82 8f       	std	Z+26, r24	; 0x1a
    f684:	93 8f       	std	Z+27, r25	; 0x1b
    f686:	a4 8f       	std	Z+28, r26	; 0x1c
    f688:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    f68a:	16 8a       	std	Z+22, r1	; 0x16
    f68c:	17 8a       	std	Z+23, r1	; 0x17
    f68e:	10 8e       	std	Z+24, r1	; 0x18
    f690:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    f692:	81 e0       	ldi	r24, 0x01	; 1
    f694:	81 83       	std	Z+1, r24	; 0x01
    f696:	01 cf       	rjmp	.-510    	; 0xf49a <main+0x3e4>
	}
  #endif

	for (address = 0; address < BOOT_ADR; address += SPM_PAGESIZE) {	/* Update all application pages */

		memset(pagebuffer, 0xFF, SPM_PAGESIZE);		/* Clear buffer */
    f698:	40 e0       	ldi	r20, 0x00	; 0
    f69a:	51 e0       	ldi	r21, 0x01	; 1
    f69c:	6f ef       	ldi	r22, 0xFF	; 255
    f69e:	70 e0       	ldi	r23, 0x00	; 0
    f6a0:	8e e0       	ldi	r24, 0x0E	; 14
    f6a2:	91 e0       	ldi	r25, 0x01	; 1
    f6a4:	0e 94 bc 7e 	call	0xfd78	; 0xfd78 <memset>
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    f6a8:	e0 90 3a 02 	lds	r14, 0x023A	; 0x80023a <FatFs>
    f6ac:	f0 90 3b 02 	lds	r15, 0x023B	; 0x80023b <FatFs+0x1>

	remain = fs->fsize - fs->fptr;
    f6b0:	f7 01       	movw	r30, r14
    f6b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    f6b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    f6b6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    f6b8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    f6ba:	46 89       	ldd	r20, Z+22	; 0x16
    f6bc:	57 89       	ldd	r21, Z+23	; 0x17
    f6be:	60 8d       	ldd	r22, Z+24	; 0x18
    f6c0:	71 8d       	ldd	r23, Z+25	; 0x19
    f6c2:	84 1b       	sub	r24, r20
    f6c4:	95 0b       	sbc	r25, r21
    f6c6:	a6 0b       	sbc	r26, r22
    f6c8:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    f6ca:	8f 3f       	cpi	r24, 0xFF	; 255
    f6cc:	91 05       	cpc	r25, r1
    f6ce:	a1 05       	cpc	r26, r1
    f6d0:	b1 05       	cpc	r27, r1
    f6d2:	11 f0       	breq	.+4      	; 0xf6d8 <main+0x622>
    f6d4:	08 f0       	brcs	.+2      	; 0xf6d8 <main+0x622>
    f6d6:	96 c0       	rjmp	.+300    	; 0xf804 <main+0x74e>
    f6d8:	6c 01       	movw	r12, r24
    f6da:	6e e0       	ldi	r22, 0x0E	; 14
    f6dc:	86 2e       	mov	r8, r22
    f6de:	61 e0       	ldi	r22, 0x01	; 1
    f6e0:	96 2e       	mov	r9, r22
    f6e2:	4a c0       	rjmp	.+148    	; 0xf778 <main+0x6c2>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				if (fs->fptr == 0)					/* On the top of the file? */
					clst = fs->org_clust;
				else
					clst = get_fat(fs->curr_clust);
    f6e4:	62 a1       	ldd	r22, Z+34	; 0x22
    f6e6:	73 a1       	ldd	r23, Z+35	; 0x23
    f6e8:	84 a1       	ldd	r24, Z+36	; 0x24
    f6ea:	95 a1       	ldd	r25, Z+37	; 0x25
    f6ec:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <get_fat>
    f6f0:	6b c0       	rjmp	.+214    	; 0xf7c8 <main+0x712>
				if (clst <= 1) ABORT(FR_DISK_ERR);
				fs->curr_clust = clst;				/* Update current cluster */
    f6f2:	62 a3       	std	Z+34, r22	; 0x22
    f6f4:	73 a3       	std	Z+35, r23	; 0x23
    f6f6:	84 a3       	std	Z+36, r24	; 0x24
    f6f8:	95 a3       	std	Z+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    f6fa:	f7 01       	movw	r30, r14
    f6fc:	62 a1       	ldd	r22, Z+34	; 0x22
    f6fe:	73 a1       	ldd	r23, Z+35	; 0x23
    f700:	84 a1       	ldd	r24, Z+36	; 0x24
    f702:	95 a1       	ldd	r25, Z+37	; 0x25
    f704:	0e 94 1d 7d 	call	0xfa3a	; 0xfa3a <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    f708:	61 15       	cp	r22, r1
    f70a:	71 05       	cpc	r23, r1
    f70c:	81 05       	cpc	r24, r1
    f70e:	91 05       	cpc	r25, r1
    f710:	11 f4       	brne	.+4      	; 0xf716 <main+0x660>
    f712:	f7 01       	movw	r30, r14
    f714:	60 c0       	rjmp	.+192    	; 0xf7d6 <main+0x720>
			fs->dsect = sect + cs;
    f716:	61 0f       	add	r22, r17
    f718:	71 1d       	adc	r23, r1
    f71a:	81 1d       	adc	r24, r1
    f71c:	91 1d       	adc	r25, r1
    f71e:	f7 01       	movw	r30, r14
    f720:	66 a3       	std	Z+38, r22	; 0x26
    f722:	77 a3       	std	Z+39, r23	; 0x27
    f724:	80 a7       	std	Z+40, r24	; 0x28
    f726:	91 a7       	std	Z+41, r25	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    f728:	f7 01       	movw	r30, r14
    f72a:	26 89       	ldd	r18, Z+22	; 0x16
    f72c:	37 89       	ldd	r19, Z+23	; 0x17
    f72e:	31 70       	andi	r19, 0x01	; 1
    f730:	52 01       	movw	r10, r4
    f732:	a2 1a       	sub	r10, r18
    f734:	b3 0a       	sbc	r11, r19
    f736:	ca 14       	cp	r12, r10
    f738:	db 04       	cpc	r13, r11
    f73a:	08 f4       	brcc	.+2      	; 0xf73e <main+0x688>
    f73c:	56 01       	movw	r10, r12
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    f73e:	f7 01       	movw	r30, r14
    f740:	46 a1       	ldd	r20, Z+38	; 0x26
    f742:	57 a1       	ldd	r21, Z+39	; 0x27
    f744:	60 a5       	ldd	r22, Z+40	; 0x28
    f746:	71 a5       	ldd	r23, Z+41	; 0x29
    f748:	85 01       	movw	r16, r10
    f74a:	c4 01       	movw	r24, r8
    f74c:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    f750:	f7 01       	movw	r30, r14
    f752:	89 2b       	or	r24, r25
    f754:	09 f0       	breq	.+2      	; 0xf758 <main+0x6a2>
    f756:	3f c0       	rjmp	.+126    	; 0xf7d6 <main+0x720>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    f758:	86 89       	ldd	r24, Z+22	; 0x16
    f75a:	97 89       	ldd	r25, Z+23	; 0x17
    f75c:	a0 8d       	ldd	r26, Z+24	; 0x18
    f75e:	b1 8d       	ldd	r27, Z+25	; 0x19
    f760:	8a 0d       	add	r24, r10
    f762:	9b 1d       	adc	r25, r11
    f764:	a1 1d       	adc	r26, r1
    f766:	b1 1d       	adc	r27, r1
    f768:	86 8b       	std	Z+22, r24	; 0x16
    f76a:	97 8b       	std	Z+23, r25	; 0x17
    f76c:	a0 8f       	std	Z+24, r26	; 0x18
    f76e:	b1 8f       	std	Z+25, r27	; 0x19
    f770:	8a 0c       	add	r8, r10
    f772:	9b 1c       	adc	r9, r11
		btr -= rcnt;
    f774:	ca 18       	sub	r12, r10
    f776:	db 08       	sbc	r13, r11
	FATFS *fs = FatFs;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    f778:	c1 14       	cp	r12, r1
    f77a:	d1 04       	cpc	r13, r1
    f77c:	69 f1       	breq	.+90     	; 0xf7d8 <main+0x722>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    f77e:	f7 01       	movw	r30, r14
    f780:	86 89       	ldd	r24, Z+22	; 0x16
    f782:	97 89       	ldd	r25, Z+23	; 0x17
    f784:	a0 8d       	ldd	r26, Z+24	; 0x18
    f786:	b1 8d       	ldd	r27, Z+25	; 0x19
    f788:	ac 01       	movw	r20, r24
    f78a:	bd 01       	movw	r22, r26
    f78c:	51 70       	andi	r21, 0x01	; 1
    f78e:	66 27       	eor	r22, r22
    f790:	77 27       	eor	r23, r23
    f792:	45 2b       	or	r20, r21
    f794:	46 2b       	or	r20, r22
    f796:	47 2b       	or	r20, r23
    f798:	39 f6       	brne	.-114    	; 0xf728 <main+0x672>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    f79a:	12 81       	ldd	r17, Z+2	; 0x02
    f79c:	11 50       	subi	r17, 0x01	; 1
    f79e:	ac 01       	movw	r20, r24
    f7a0:	bd 01       	movw	r22, r26
    f7a2:	09 e0       	ldi	r16, 0x09	; 9
    f7a4:	76 95       	lsr	r23
    f7a6:	67 95       	ror	r22
    f7a8:	57 95       	ror	r21
    f7aa:	47 95       	ror	r20
    f7ac:	0a 95       	dec	r16
    f7ae:	d1 f7       	brne	.-12     	; 0xf7a4 <main+0x6ee>
    f7b0:	14 23       	and	r17, r20
			if (!cs) {								/* On the cluster boundary? */
    f7b2:	09 f0       	breq	.+2      	; 0xf7b6 <main+0x700>
    f7b4:	a2 cf       	rjmp	.-188    	; 0xf6fa <main+0x644>
				if (fs->fptr == 0)					/* On the top of the file? */
    f7b6:	89 2b       	or	r24, r25
    f7b8:	8a 2b       	or	r24, r26
    f7ba:	8b 2b       	or	r24, r27
    f7bc:	09 f0       	breq	.+2      	; 0xf7c0 <main+0x70a>
    f7be:	92 cf       	rjmp	.-220    	; 0xf6e4 <main+0x62e>
					clst = fs->org_clust;
    f7c0:	66 8d       	ldd	r22, Z+30	; 0x1e
    f7c2:	77 8d       	ldd	r23, Z+31	; 0x1f
    f7c4:	80 a1       	ldd	r24, Z+32	; 0x20
    f7c6:	91 a1       	ldd	r25, Z+33	; 0x21
				else
					clst = get_fat(fs->curr_clust);
				if (clst <= 1) ABORT(FR_DISK_ERR);
    f7c8:	f7 01       	movw	r30, r14
    f7ca:	62 30       	cpi	r22, 0x02	; 2
    f7cc:	71 05       	cpc	r23, r1
    f7ce:	81 05       	cpc	r24, r1
    f7d0:	91 05       	cpc	r25, r1
    f7d2:	08 f0       	brcs	.+2      	; 0xf7d6 <main+0x720>
    f7d4:	8e cf       	rjmp	.-228    	; 0xf6f2 <main+0x63c>
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
    f7d6:	11 82       	std	Z+1, r1	; 0x01
// Global usage Var (address, pagebuffer)
static uint8_t pagecmp()
{
	uint16_t i=0;
	for (i = 0; i < SPM_PAGESIZE; i++) {
		if (PGM_READ_BYTE(address + i) != pagebuffer[i]) {
    f7d8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <address>
    f7dc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <address+0x1>
    f7e0:	4e e0       	ldi	r20, 0x0E	; 14
    f7e2:	51 e0       	ldi	r21, 0x01	; 1
    f7e4:	da 01       	movw	r26, r20
    f7e6:	9c 01       	movw	r18, r24
    f7e8:	2e 50       	subi	r18, 0x0E	; 14
    f7ea:	31 40       	sbci	r19, 0x01	; 1
    f7ec:	f9 01       	movw	r30, r18
    f7ee:	ea 0f       	add	r30, r26
    f7f0:	fb 1f       	adc	r31, r27
    f7f2:	e4 91       	lpm	r30, Z
    f7f4:	6d 91       	ld	r22, X+
    f7f6:	e6 13       	cpse	r30, r22
    f7f8:	c7 c0       	rjmp	.+398    	; 0xf988 <main+0x8d2>
// Flash Verify function
// Global usage Var (address, pagebuffer)
static uint8_t pagecmp()
{
	uint16_t i=0;
	for (i = 0; i < SPM_PAGESIZE; i++) {
    f7fa:	6a 16       	cp	r6, r26
    f7fc:	7b 06       	cpc	r7, r27
    f7fe:	b1 f7       	brne	.-20     	; 0xf7ec <main+0x736>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    f800:	a8 95       	wdr
    f802:	e5 c0       	rjmp	.+458    	; 0xf9ce <main+0x918>
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    f804:	80 e0       	ldi	r24, 0x00	; 0
    f806:	91 e0       	ldi	r25, 0x01	; 1
    f808:	a0 e0       	ldi	r26, 0x00	; 0
    f80a:	b0 e0       	ldi	r27, 0x00	; 0
    f80c:	65 cf       	rjmp	.-310    	; 0xf6d8 <main+0x622>
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
      }
    }
    else if(ch == STK_SET_DEVICE) {
    f80e:	82 34       	cpi	r24, 0x42	; 66
    f810:	21 f4       	brne	.+8      	; 0xf81a <main+0x764>
      // SET DEVICE is ignored
      getNch(20);
    f812:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
    f814:	0e 94 b2 7d 	call	0xfb64	; 0xfb64 <getNch>
    f818:	80 ce       	rjmp	.-768    	; 0xf51a <main+0x464>
    }
    else if(ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    f81a:	85 34       	cpi	r24, 0x45	; 69
    f81c:	11 f4       	brne	.+4      	; 0xf822 <main+0x76c>
      // SET DEVICE EXT is ignored
      getNch(5);
    f81e:	85 e0       	ldi	r24, 0x05	; 5
    f820:	f9 cf       	rjmp	.-14     	; 0xf814 <main+0x75e>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    f822:	85 35       	cpi	r24, 0x55	; 85
    f824:	61 f4       	brne	.+24     	; 0xf83e <main+0x788>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    f826:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f82a:	e8 2e       	mov	r14, r24
    f82c:	f1 2c       	mov	r15, r1
      newAddress = (newAddress & 0xff) | (getch() << 8);
    f82e:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f832:	f8 2a       	or	r15, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    f834:	ee 0c       	add	r14, r14
    f836:	ff 1c       	adc	r15, r15
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    f838:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <verifySpace>
    f83c:	6e ce       	rjmp	.-804    	; 0xf51a <main+0x464>
#endif
      newAddress += newAddress; // Convert from word address to byte address
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    f83e:	86 35       	cpi	r24, 0x56	; 86
    f840:	29 f4       	brne	.+10     	; 0xf84c <main+0x796>
      // UNIVERSAL command is ignored
      getNch(4);
    f842:	84 e0       	ldi	r24, 0x04	; 4
    f844:	0e 94 b2 7d 	call	0xfb64	; 0xfb64 <getNch>
      putch(0x00);
    f848:	80 e0       	ldi	r24, 0x00	; 0
    f84a:	65 ce       	rjmp	.-822    	; 0xf516 <main+0x460>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    f84c:	84 36       	cpi	r24, 0x64	; 100
    f84e:	09 f0       	breq	.+2      	; 0xf852 <main+0x79c>
    f850:	58 c0       	rjmp	.+176    	; 0xf902 <main+0x84c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    f852:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f856:	c8 2e       	mov	r12, r24
    f858:	d1 2c       	mov	r13, r1
    f85a:	dc 2c       	mov	r13, r12
    f85c:	cc 24       	eor	r12, r12
    f85e:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f862:	c8 2a       	or	r12, r24
      savelength = length;
      desttype = getch();
    f864:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f868:	38 2e       	mov	r3, r24
    f86a:	56 01       	movw	r10, r12
    f86c:	b3 94       	inc	r11

      // read a page worth of contents
      bufPtr = buff;
    f86e:	00 e0       	ldi	r16, 0x00	; 0
    f870:	11 e0       	ldi	r17, 0x01	; 1
      do *bufPtr++ = getch();
    f872:	48 01       	movw	r8, r16
    f874:	2f ef       	ldi	r18, 0xFF	; 255
    f876:	82 1a       	sub	r8, r18
    f878:	92 0a       	sbc	r9, r18
    f87a:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f87e:	f8 01       	movw	r30, r16
    f880:	80 83       	st	Z, r24
    f882:	84 01       	movw	r16, r8
      while (--length);
    f884:	8a 14       	cp	r8, r10
    f886:	9b 04       	cpc	r9, r11
    f888:	a1 f7       	brne	.-24     	; 0xf872 <main+0x7bc>

      // Read command terminator, start reply
      verifySpace();
    f88a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    f88e:	f5 e4       	ldi	r31, 0x45	; 69
    f890:	3f 16       	cp	r3, r31
    f892:	09 f4       	brne	.+2      	; 0xf896 <main+0x7e0>
    f894:	33 c0       	rjmp	.+102    	; 0xf8fc <main+0x846>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    f896:	f7 01       	movw	r30, r14
    f898:	77 be       	out	0x37, r7	; 55
    f89a:	e8 95       	spm
	    boot_spm_busy_wait();
    f89c:	07 b6       	in	r0, 0x37	; 55
    f89e:	00 fc       	sbrc	r0, 0
    f8a0:	fd cf       	rjmp	.-6      	; 0xf89c <main+0x7e6>
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
	    uint16_t addrPtr = (uint16_t)(void*)address;
    f8a2:	f7 01       	movw	r30, r14
	 * the default rather than checking for the correct code, we save
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
    f8a4:	a0 e0       	ldi	r26, 0x00	; 0
    f8a6:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    f8a8:	9c 91       	ld	r25, X
    f8aa:	9d 01       	movw	r18, r26
    f8ac:	2e 5f       	subi	r18, 0xFE	; 254
    f8ae:	3f 4f       	sbci	r19, 0xFF	; 255
		a |= (*bufPtr++) << 8;
    f8b0:	11 96       	adiw	r26, 0x01	; 1
    f8b2:	8c 91       	ld	r24, X
    f8b4:	89 27       	eor	r24, r25
    f8b6:	98 27       	eor	r25, r24
    f8b8:	89 27       	eor	r24, r25
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    f8ba:	0c 01       	movw	r0, r24
    f8bc:	67 be       	out	0x37, r6	; 55
    f8be:	e8 95       	spm
    f8c0:	11 24       	eor	r1, r1
		addrPtr += 2;
    f8c2:	32 96       	adiw	r30, 0x02	; 2
	    } while (len -= 2);
    f8c4:	42 e0       	ldi	r20, 0x02	; 2
    f8c6:	c4 1a       	sub	r12, r20
    f8c8:	d1 08       	sbc	r13, r1
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
    f8ca:	d9 01       	movw	r26, r18
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
		addrPtr += 2;
	    } while (len -= 2);
    f8cc:	69 f7       	brne	.-38     	; 0xf8a8 <main+0x7f2>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    f8ce:	f7 01       	movw	r30, r14
    f8d0:	57 be       	out	0x37, r5	; 55
    f8d2:	e8 95       	spm
	    boot_spm_busy_wait();
    f8d4:	07 b6       	in	r0, 0x37	; 55
    f8d6:	00 fc       	sbrc	r0, 0
    f8d8:	fd cf       	rjmp	.-6      	; 0xf8d4 <main+0x81e>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    f8da:	47 be       	out	0x37, r4	; 55
    f8dc:	e8 95       	spm
    f8de:	1d ce       	rjmp	.-966    	; 0xf51a <main+0x464>
{
    switch (memtype) {
    case 'E': // EEPROM
    #if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
	         eeprom_write_byte((uint8_t *)(address++), *mybuff++);
    f8e0:	60 81       	ld	r22, Z
    f8e2:	c7 01       	movw	r24, r14
    f8e4:	80 0f       	add	r24, r16
    f8e6:	91 1f       	adc	r25, r17
    f8e8:	0e 94 cb 7e 	call	0xfd96	; 0xfd96 <eeprom_write_byte>
    f8ec:	0f 5f       	subi	r16, 0xFF	; 255
    f8ee:	1f 4f       	sbci	r17, 0xFF	; 255
    f8f0:	f8 01       	movw	r30, r16
    f8f2:	f3 95       	inc	r31
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    case 'E': // EEPROM
    #if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
    f8f4:	c0 16       	cp	r12, r16
    f8f6:	d1 06       	cpc	r13, r17
    f8f8:	99 f7       	brne	.-26     	; 0xf8e0 <main+0x82a>
    f8fa:	0f ce       	rjmp	.-994    	; 0xf51a <main+0x464>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    f8fc:	10 e0       	ldi	r17, 0x00	; 0
    f8fe:	00 e0       	ldi	r16, 0x00	; 0
    f900:	f7 cf       	rjmp	.-18     	; 0xf8f0 <main+0x83a>

      writebuffer(desttype, buff, address, savelength);

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    f902:	84 37       	cpi	r24, 0x74	; 116
    f904:	49 f5       	brne	.+82     	; 0xf958 <main+0x8a2>
      uint8_t desttype;
      GETLENGTH(length);
    f906:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f90a:	c8 2e       	mov	r12, r24
    f90c:	d1 2c       	mov	r13, r1
    f90e:	dc 2c       	mov	r13, r12
    f910:	cc 24       	eor	r12, r12
    f912:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f916:	c8 2a       	or	r12, r24

      desttype = getch();
    f918:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    f91c:	18 2f       	mov	r17, r24

      verifySpace();
    f91e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    f922:	15 34       	cpi	r17, 0x45	; 69
    f924:	71 f4       	brne	.+28     	; 0xf942 <main+0x88c>
    f926:	ce 0c       	add	r12, r14
    f928:	df 1c       	adc	r13, r15
    f92a:	87 01       	movw	r16, r14

    #if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
      case 'E': // EEPROM
      	do {
      	    putch(eeprom_read_byte((uint8_t *)(address++)));
    f92c:	c8 01       	movw	r24, r16
    f92e:	0e 94 c3 7e 	call	0xfd86	; 0xfd86 <eeprom_read_byte>
    f932:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
    f936:	0f 5f       	subi	r16, 0xFF	; 255
    f938:	1f 4f       	sbci	r17, 0xFF	; 255
      	} while (--length);
    f93a:	c0 16       	cp	r12, r16
    f93c:	d1 06       	cpc	r13, r17
    f93e:	b1 f7       	brne	.-20     	; 0xf92c <main+0x876>
    f940:	ec cd       	rjmp	.-1064   	; 0xf51a <main+0x464>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    f942:	87 01       	movw	r16, r14
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
    f944:	f8 01       	movw	r30, r16
    f946:	85 91       	lpm	r24, Z+
    f948:	8f 01       	movw	r16, r30
#endif
	    putch(ch);
    f94a:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
	} while (--length);
    f94e:	f1 e0       	ldi	r31, 0x01	; 1
    f950:	cf 1a       	sub	r12, r31
    f952:	d1 08       	sbc	r13, r1
    f954:	b9 f7       	brne	.-18     	; 0xf944 <main+0x88e>
    f956:	e1 cd       	rjmp	.-1086   	; 0xf51a <main+0x464>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    f958:	85 37       	cpi	r24, 0x75	; 117
    f95a:	51 f4       	brne	.+20     	; 0xf970 <main+0x8ba>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    f95c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <verifySpace>
      putch(SIGNATURE_0);
    f960:	8e e1       	ldi	r24, 0x1E	; 30
    f962:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
      putch(SIGNATURE_1);
    f966:	86 e9       	ldi	r24, 0x96	; 150
    f968:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
      putch(SIGNATURE_2);
    f96c:	8a e0       	ldi	r24, 0x0A	; 10
    f96e:	d3 cd       	rjmp	.-1114   	; 0xf516 <main+0x460>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    f970:	81 35       	cpi	r24, 0x51	; 81
    f972:	09 f0       	breq	.+2      	; 0xf976 <main+0x8c0>
    f974:	61 cf       	rjmp	.-318    	; 0xf838 <main+0x782>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    f976:	88 e0       	ldi	r24, 0x08	; 8
    f978:	0e 94 86 7d 	call	0xfb0c	; 0xfb0c <watchdogConfig>
    f97c:	5d cf       	rjmp	.-326    	; 0xf838 <main+0x782>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
    f97e:	88 30       	cpi	r24, 0x08	; 8
    f980:	09 f0       	breq	.+2      	; 0xf984 <main+0x8ce>
    f982:	63 cd       	rjmp	.-1338   	; 0xf44a <main+0x394>
			i = 8; ni = 11;
    f984:	9b e0       	ldi	r25, 0x0B	; 11
    f986:	80 cc       	rjmp	.-1792   	; 0xf288 <main+0x1d2>
// Global usage Var (address, pagebuffer)
void write_flash_page()
{
	uint16_t i=0;

	boot_page_erase (address);
    f988:	23 e0       	ldi	r18, 0x03	; 3
    f98a:	fc 01       	movw	r30, r24
    f98c:	27 bf       	out	0x37, r18	; 55
    f98e:	e8 95       	spm
	boot_spm_busy_wait ();      // Wait until the memory is erased.
    f990:	07 b6       	in	r0, 0x37	; 55
    f992:	00 fc       	sbrc	r0, 0
    f994:	fd cf       	rjmp	.-6      	; 0xf990 <main+0x8da>
	for (i=0; i<SPM_PAGESIZE; i+=2)
    f996:	30 e0       	ldi	r19, 0x00	; 0
    f998:	20 e0       	ldi	r18, 0x00	; 0
	{
		// Set up little-endian word.
		uint16_t w = *((uint16_t*)(pagebuffer + i));
    f99a:	fa 01       	movw	r30, r20
    f99c:	61 91       	ld	r22, Z+
    f99e:	71 91       	ld	r23, Z+
    f9a0:	af 01       	movw	r20, r30
		boot_page_fill (address + i, w);
    f9a2:	fc 01       	movw	r30, r24
    f9a4:	e2 0f       	add	r30, r18
    f9a6:	f3 1f       	adc	r31, r19
    f9a8:	a1 e0       	ldi	r26, 0x01	; 1
    f9aa:	0b 01       	movw	r0, r22
    f9ac:	a7 bf       	out	0x37, r26	; 55
    f9ae:	e8 95       	spm
    f9b0:	11 24       	eor	r1, r1
{
	uint16_t i=0;

	boot_page_erase (address);
	boot_spm_busy_wait ();      // Wait until the memory is erased.
	for (i=0; i<SPM_PAGESIZE; i+=2)
    f9b2:	2e 5f       	subi	r18, 0xFE	; 254
    f9b4:	3f 4f       	sbci	r19, 0xFF	; 255
    f9b6:	21 15       	cp	r18, r1
    f9b8:	e1 e0       	ldi	r30, 0x01	; 1
    f9ba:	3e 07       	cpc	r19, r30
    f9bc:	71 f7       	brne	.-36     	; 0xf99a <main+0x8e4>
	{
		// Set up little-endian word.
		uint16_t w = *((uint16_t*)(pagebuffer + i));
		boot_page_fill (address + i, w);
	}
	boot_page_write(address);   // Store buffer in flash page.
    f9be:	fc 01       	movw	r30, r24
    f9c0:	37 be       	out	0x37, r3	; 55
    f9c2:	e8 95       	spm
	boot_spm_busy_wait();       // Wait until the memory is written.
    f9c4:	07 b6       	in	r0, 0x37	; 55
    f9c6:	00 fc       	sbrc	r0, 0
    f9c8:	fd cf       	rjmp	.-6      	; 0xf9c4 <main+0x90e>

	boot_rww_enable ();
    f9ca:	27 be       	out	0x37, r2	; 55
    f9cc:	e8 95       	spm
    watchdogReset();
		_delay_ms(100);
	}
  #endif

	for (address = 0; address < BOOT_ADR; address += SPM_PAGESIZE) {	/* Update all application pages */
    f9ce:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <address>
    f9d2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <address+0x1>
    f9d6:	93 95       	inc	r25
    f9d8:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <address+0x1>
    f9dc:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <address>
    f9e0:	6d cd       	rjmp	.-1318   	; 0xf4bc <main+0x406>

0000f9e2 <__bad_interrupt>:
    f9e2:	0c 94 00 78 	jmp	0xf000	; 0xf000 <__vectors>

0000f9e6 <init_leds>:
#ifdef USE_LED

.global init_leds
.func init_leds
init_leds:
	sbi DDR_PW
    f9e6:	21 9a       	sbi	0x04, 1	; 4
	ret
    f9e8:	08 95       	ret

0000f9ea <led_power_on>:
.endfunc

.global led_power_on
.func led_power_on
led_power_on:
	sbi PORT_PW
    f9ea:	29 9a       	sbi	0x05, 1	; 5
	ret
    f9ec:	08 95       	ret

0000f9ee <led_power_off>:
.endfunc

.global led_power_off
.func led_power_off
led_power_off:
	cbi PORT_PW
    f9ee:	29 98       	cbi	0x05, 1	; 5
	ret
    f9f0:	08 95       	ret

0000f9f2 <led_power_toggle>:
.endfunc

.global led_power_toggle
.func led_power_toggle
led_power_toggle:
	sbis PORT_PW
    f9f2:	29 9b       	sbis	0x05, 1	; 5
	jmp led_power_on
    f9f4:	0c 94 f5 7c 	jmp	0xf9ea	; 0xf9ea <led_power_on>
	jmp led_power_off
    f9f8:	0c 94 f7 7c 	jmp	0xf9ee	; 0xf9ee <led_power_off>

0000f9fc <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    f9fc:	23 9a       	sbi	0x04, 3	; 4
	sbi	DDR_DI		; DI: output
    f9fe:	25 9a       	sbi	0x04, 5	; 4
	sbi	DDR_CK		; SCLK: output
    fa00:	27 9a       	sbi	0x04, 7	; 4
	sbi	PORT_DO		; DO: pull-up
    fa02:	2e 9a       	sbi	0x05, 6	; 5
	ret
    fa04:	08 95       	ret

0000fa06 <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(F_CPU / 100000)	/* Loop counter */
    fa06:	80 e5       	ldi	r24, 0x50	; 80
1:	sbiw	r30, 1		/* 10 clocks per loop */
    fa08:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    fa0a:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    fa0c:	31 97       	sbiw	r30, 0x01	; 1
	nop
    fa0e:	00 00       	nop
	dec	r24
    fa10:	8a 95       	dec	r24
	brne	1b
    fa12:	d1 f7       	brne	.-12     	; 0xfa08 <dly_100us+0x2>
	ret
    fa14:	08 95       	ret

0000fa16 <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    fa16:	02 d0       	rcall	.+4      	; 0xfa1c <deselect>
	cbi	PORT_CS
    fa18:	2b 98       	cbi	0x05, 3	; 5
	rjmp	rcv_spi
    fa1a:	01 c0       	rjmp	.+2      	; 0xfa1e <rcv_spi>

0000fa1c <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    fa1c:	2b 9a       	sbi	0x05, 3	; 5

0000fa1e <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    fa1e:	8f ef       	ldi	r24, 0xFF	; 255

0000fa20 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    fa20:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    fa22:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		;
    fa24:	2d 9a       	sbi	0x05, 5	; 5
	sbrs	r24, 7		;
    fa26:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    fa28:	2d 98       	cbi	0x05, 5	; 5
	lsl	r24		; Get DO from MMC
    fa2a:	88 0f       	add	r24, r24
	sbic	PIN_DO		;
    fa2c:	1e 99       	sbic	0x03, 6	; 3
	inc	r24		; /
    fa2e:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    fa30:	2f 9a       	sbi	0x05, 7	; 5
	cbi	PORT_CK		; /
    fa32:	2f 98       	cbi	0x05, 7	; 5
	dec	r25		; Repeat 8 times
    fa34:	9a 95       	dec	r25
	brne	1b		; /
    fa36:	a9 f7       	brne	.-22     	; 0xfa22 <xmit_spi+0x2>
	ret
    fa38:	08 95       	ret

0000fa3a <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
    fa3a:	0f 93       	push	r16
    fa3c:	1f 93       	push	r17
	FATFS *fs = FatFs;
    fa3e:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <FatFs>
    fa42:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <FatFs+0x1>


	clst -= 2;
    fa46:	9b 01       	movw	r18, r22
    fa48:	ac 01       	movw	r20, r24
    fa4a:	22 50       	subi	r18, 0x02	; 2
    fa4c:	31 09       	sbc	r19, r1
    fa4e:	41 09       	sbc	r20, r1
    fa50:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    fa52:	86 81       	ldd	r24, Z+6	; 0x06
    fa54:	97 81       	ldd	r25, Z+7	; 0x07
    fa56:	a0 85       	ldd	r26, Z+8	; 0x08
    fa58:	b1 85       	ldd	r27, Z+9	; 0x09
    fa5a:	02 97       	sbiw	r24, 0x02	; 2
    fa5c:	a1 09       	sbc	r26, r1
    fa5e:	b1 09       	sbc	r27, r1
    fa60:	28 17       	cp	r18, r24
    fa62:	39 07       	cpc	r19, r25
    fa64:	4a 07       	cpc	r20, r26
    fa66:	5b 07       	cpc	r21, r27
    fa68:	78 f4       	brcc	.+30     	; 0xfa88 <clust2sect+0x4e>
	return (DWORD)clst * fs->csize + fs->database;
    fa6a:	a2 81       	ldd	r26, Z+2	; 0x02
    fa6c:	b0 e0       	ldi	r27, 0x00	; 0
    fa6e:	0e 94 fb 7e 	call	0xfdf6	; 0xfdf6 <__muluhisi3>
    fa72:	02 89       	ldd	r16, Z+18	; 0x12
    fa74:	13 89       	ldd	r17, Z+19	; 0x13
    fa76:	24 89       	ldd	r18, Z+20	; 0x14
    fa78:	35 89       	ldd	r19, Z+21	; 0x15
    fa7a:	60 0f       	add	r22, r16
    fa7c:	71 1f       	adc	r23, r17
    fa7e:	82 1f       	adc	r24, r18
    fa80:	93 1f       	adc	r25, r19
}
    fa82:	1f 91       	pop	r17
    fa84:	0f 91       	pop	r16
    fa86:	08 95       	ret
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    fa88:	60 e0       	ldi	r22, 0x00	; 0
    fa8a:	70 e0       	ldi	r23, 0x00	; 0
    fa8c:	cb 01       	movw	r24, r22
    fa8e:	f9 cf       	rjmp	.-14     	; 0xfa82 <clust2sect+0x48>

0000fa90 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    fa90:	0f 93       	push	r16
    fa92:	1f 93       	push	r17
    fa94:	cf 93       	push	r28
    fa96:	df 93       	push	r29
    fa98:	dc 01       	movw	r26, r24
	CLUST clst;
	FATFS *fs = FatFs;
    fa9a:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <FatFs>
    fa9e:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <FatFs+0x1>


	dj->index = 0;
    faa2:	11 96       	adiw	r26, 0x01	; 1
    faa4:	1c 92       	st	X, r1
    faa6:	1e 92       	st	-X, r1
	clst = dj->sclust;
    faa8:	14 96       	adiw	r26, 0x04	; 4
    faaa:	6d 91       	ld	r22, X+
    faac:	7d 91       	ld	r23, X+
    faae:	8d 91       	ld	r24, X+
    fab0:	9c 91       	ld	r25, X
    fab2:	17 97       	sbiw	r26, 0x07	; 7
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    fab4:	61 30       	cpi	r22, 0x01	; 1
    fab6:	71 05       	cpc	r23, r1
    fab8:	81 05       	cpc	r24, r1
    faba:	91 05       	cpc	r25, r1
    fabc:	21 f1       	breq	.+72     	; 0xfb06 <dir_rewind+0x76>
    fabe:	06 81       	ldd	r16, Z+6	; 0x06
    fac0:	17 81       	ldd	r17, Z+7	; 0x07
    fac2:	20 85       	ldd	r18, Z+8	; 0x08
    fac4:	31 85       	ldd	r19, Z+9	; 0x09
    fac6:	60 17       	cp	r22, r16
    fac8:	71 07       	cpc	r23, r17
    faca:	82 07       	cpc	r24, r18
    facc:	93 07       	cpc	r25, r19
    face:	d8 f4       	brcc	.+54     	; 0xfb06 <dir_rewind+0x76>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
    fad0:	61 15       	cp	r22, r1
    fad2:	71 05       	cpc	r23, r1
    fad4:	81 05       	cpc	r24, r1
    fad6:	91 05       	cpc	r25, r1
    fad8:	21 f4       	brne	.+8      	; 0xfae2 <dir_rewind+0x52>
		clst = (CLUST)fs->dirbase;
    fada:	66 85       	ldd	r22, Z+14	; 0x0e
    fadc:	77 85       	ldd	r23, Z+15	; 0x0f
    fade:	80 89       	ldd	r24, Z+16	; 0x10
    fae0:	91 89       	ldd	r25, Z+17	; 0x11
    fae2:	ed 01       	movw	r28, r26
	dj->clust = clst;						/* Current cluster */
    fae4:	68 87       	std	Y+8, r22	; 0x08
    fae6:	79 87       	std	Y+9, r23	; 0x09
    fae8:	8a 87       	std	Y+10, r24	; 0x0a
    faea:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    faec:	0e 94 1d 7d 	call	0xfa3a	; 0xfa3a <clust2sect>
    faf0:	6c 87       	std	Y+12, r22	; 0x0c
    faf2:	7d 87       	std	Y+13, r23	; 0x0d
    faf4:	8e 87       	std	Y+14, r24	; 0x0e
    faf6:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
    faf8:	90 e0       	ldi	r25, 0x00	; 0
    fafa:	80 e0       	ldi	r24, 0x00	; 0
}
    fafc:	df 91       	pop	r29
    fafe:	cf 91       	pop	r28
    fb00:	1f 91       	pop	r17
    fb02:	0f 91       	pop	r16
    fb04:	08 95       	ret


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
    fb06:	81 e0       	ldi	r24, 0x01	; 1
    fb08:	90 e0       	ldi	r25, 0x00	; 0
    fb0a:	f8 cf       	rjmp	.-16     	; 0xfafc <dir_rewind+0x6c>

0000fb0c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fb0c:	e0 e6       	ldi	r30, 0x60	; 96
    fb0e:	f0 e0       	ldi	r31, 0x00	; 0
    fb10:	98 e1       	ldi	r25, 0x18	; 24
    fb12:	90 83       	st	Z, r25
  WDTCSR = x;
    fb14:	80 83       	st	Z, r24
}
    fb16:	08 95       	ret

0000fb18 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    fb18:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    fb1a:	80 e0       	ldi	r24, 0x00	; 0
    fb1c:	0e 94 86 7d 	call	0xfb0c	; 0xfb0c <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    fb20:	e0 e0       	ldi	r30, 0x00	; 0
    fb22:	ff 27       	eor	r31, r31
    fb24:	09 94       	ijmp

0000fb26 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    fb26:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fb2a:	87 ff       	sbrs	r24, 7
    fb2c:	fc cf       	rjmp	.-8      	; 0xfb26 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    fb2e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fb32:	84 fd       	sbrc	r24, 4
    fb34:	01 c0       	rjmp	.+2      	; 0xfb38 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fb36:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    fb38:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fb3c:	08 95       	ret

0000fb3e <putch>:
}

// UART Standarf Function
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    fb3e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fb42:	95 ff       	sbrs	r25, 5
    fb44:	fc cf       	rjmp	.-8      	; 0xfb3e <putch>
  UART_UDR = ch;
    fb46:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fb4a:	08 95       	ret

0000fb4c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fb4c:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    fb50:	80 32       	cpi	r24, 0x20	; 32
    fb52:	21 f0       	breq	.+8      	; 0xfb5c <verifySpace+0x10>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fb54:	88 e0       	ldi	r24, 0x08	; 8
    fb56:	0e 94 86 7d 	call	0xfb0c	; 0xfb0c <watchdogConfig>
    fb5a:	ff cf       	rjmp	.-2      	; 0xfb5a <verifySpace+0xe>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fb5c:	84 e1       	ldi	r24, 0x14	; 20
    fb5e:	0e 94 9f 7d 	call	0xfb3e	; 0xfb3e <putch>
}
    fb62:	08 95       	ret

0000fb64 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fb64:	cf 93       	push	r28
    fb66:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fb68:	0e 94 93 7d 	call	0xfb26	; 0xfb26 <getch>
    fb6c:	c1 50       	subi	r28, 0x01	; 1
    fb6e:	e1 f7       	brne	.-8      	; 0xfb68 <getNch+0x4>
  verifySpace();
    fb70:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <verifySpace>
}
    fb74:	cf 91       	pop	r28
    fb76:	08 95       	ret

0000fb78 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    fb78:	cf 92       	push	r12
    fb7a:	df 92       	push	r13
    fb7c:	ef 92       	push	r14
    fb7e:	ff 92       	push	r15
    fb80:	cf 93       	push	r28
    fb82:	c8 2f       	mov	r28, r24
    fb84:	6a 01       	movw	r12, r20
    fb86:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    fb88:	87 ff       	sbrs	r24, 7
    fb8a:	09 c0       	rjmp	.+18     	; 0xfb9e <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    fb8c:	40 e0       	ldi	r20, 0x00	; 0
    fb8e:	50 e0       	ldi	r21, 0x00	; 0
    fb90:	ba 01       	movw	r22, r20
    fb92:	87 e7       	ldi	r24, 0x77	; 119
    fb94:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
		if (res > 1) return res;
    fb98:	82 30       	cpi	r24, 0x02	; 2
    fb9a:	10 f5       	brcc	.+68     	; 0xfbe0 <send_cmd+0x68>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    fb9c:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	select();
    fb9e:	0e 94 0b 7d 	call	0xfa16	; 0xfa16 <select>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    fba2:	8c 2f       	mov	r24, r28
    fba4:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    fba8:	8f 2d       	mov	r24, r15
    fbaa:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    fbae:	8e 2d       	mov	r24, r14
    fbb0:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    fbb4:	8d 2d       	mov	r24, r13
    fbb6:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    fbba:	8c 2d       	mov	r24, r12
    fbbc:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    fbc0:	85 e9       	ldi	r24, 0x95	; 149
    fbc2:	c0 34       	cpi	r28, 0x40	; 64
    fbc4:	21 f0       	breq	.+8      	; 0xfbce <send_cmd+0x56>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    fbc6:	87 e8       	ldi	r24, 0x87	; 135
    fbc8:	c8 34       	cpi	r28, 0x48	; 72
    fbca:	09 f0       	breq	.+2      	; 0xfbce <send_cmd+0x56>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    fbcc:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    fbce:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <xmit_spi>
    fbd2:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    fbd4:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
	} while ((res & 0x80) && --n);
    fbd8:	87 ff       	sbrs	r24, 7
    fbda:	02 c0       	rjmp	.+4      	; 0xfbe0 <send_cmd+0x68>
    fbdc:	c1 50       	subi	r28, 0x01	; 1
    fbde:	d1 f7       	brne	.-12     	; 0xfbd4 <send_cmd+0x5c>

	return res;			/* Return with the response value */
}
    fbe0:	cf 91       	pop	r28
    fbe2:	ff 90       	pop	r15
    fbe4:	ef 90       	pop	r14
    fbe6:	df 90       	pop	r13
    fbe8:	cf 90       	pop	r12
    fbea:	08 95       	ret

0000fbec <disk_readp>:
	BYTE* buff,		/* Pointer to the destination object */
	DWORD sector,	/* Sector number (LBA) */
	UINT offset,	/* Offset in the sector */
	UINT count		/* Byte count (bit15:destination) */
)
{
    fbec:	b0 e0       	ldi	r27, 0x00	; 0
    fbee:	a0 e0       	ldi	r26, 0x00	; 0
    fbf0:	ec ef       	ldi	r30, 0xFC	; 252
    fbf2:	fd e7       	ldi	r31, 0x7D	; 125
    fbf4:	0c 94 10 7f 	jmp	0xfe20	; 0xfe20 <__prologue_saves__+0x14>
    fbf8:	7c 01       	movw	r14, r24
    fbfa:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;

	if (!(CardType & CT_BLOCK)) sector *= 512;		/* Convert to byte address if needed */
    fbfc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <CardType>
    fc00:	83 fd       	sbrc	r24, 3
    fc02:	07 c0       	rjmp	.+14     	; 0xfc12 <disk_readp+0x26>
    fc04:	89 e0       	ldi	r24, 0x09	; 9
    fc06:	44 0f       	add	r20, r20
    fc08:	55 1f       	adc	r21, r21
    fc0a:	66 1f       	adc	r22, r22
    fc0c:	77 1f       	adc	r23, r23
    fc0e:	8a 95       	dec	r24
    fc10:	d1 f7       	brne	.-12     	; 0xfc06 <disk_readp+0x1a>

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
    fc12:	81 e5       	ldi	r24, 0x51	; 81
    fc14:	0e 94 bc 7d 	call	0xfb78	; 0xfb78 <send_cmd>
    fc18:	81 11       	cpse	r24, r1
    fc1a:	08 c0       	rjmp	.+16     	; 0xfc2c <disk_readp+0x40>
    fc1c:	c0 e4       	ldi	r28, 0x40	; 64
    fc1e:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    fc20:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
		} while (rc == 0xFF && --bc);
    fc24:	8f 3f       	cpi	r24, 0xFF	; 255
    fc26:	29 f4       	brne	.+10     	; 0xfc32 <disk_readp+0x46>
    fc28:	21 97       	sbiw	r28, 0x01	; 1
    fc2a:	d1 f7       	brne	.-12     	; 0xfc20 <disk_readp+0x34>
	BYTE rc;
	WORD bc;

	if (!(CardType & CT_BLOCK)) sector *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
    fc2c:	c1 e0       	ldi	r28, 0x01	; 1
    fc2e:	d0 e0       	ldi	r29, 0x00	; 0
    fc30:	21 c0       	rjmp	.+66     	; 0xfc74 <disk_readp+0x88>
		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
    fc32:	8e 3f       	cpi	r24, 0xFE	; 254
    fc34:	d9 f7       	brne	.-10     	; 0xfc2c <disk_readp+0x40>
			bc = 514 - offset - count;
    fc36:	c2 e0       	ldi	r28, 0x02	; 2
    fc38:	d2 e0       	ldi	r29, 0x02	; 2
    fc3a:	c0 1b       	sub	r28, r16
    fc3c:	d1 0b       	sbc	r29, r17
    fc3e:	cc 19       	sub	r28, r12
    fc40:	dd 09       	sbc	r29, r13

			/* Skip leading bytes */
			if (offset) {
    fc42:	c1 14       	cp	r12, r1
    fc44:	d1 04       	cpc	r13, r1
    fc46:	31 f0       	breq	.+12     	; 0xfc54 <disk_readp+0x68>
				do rcv_spi(); while (--offset);
    fc48:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
    fc4c:	81 e0       	ldi	r24, 0x01	; 1
    fc4e:	c8 1a       	sub	r12, r24
    fc50:	d1 08       	sbc	r13, r1
    fc52:	f7 cf       	rjmp	.-18     	; 0xfc42 <disk_readp+0x56>
    fc54:	0e 0d       	add	r16, r14
    fc56:	1f 1d       	adc	r17, r15
			}

			/* Receive a part of the sector */
			do {
				*buff++ = rcv_spi();
    fc58:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
    fc5c:	f7 01       	movw	r30, r14
    fc5e:	81 93       	st	Z+, r24
    fc60:	7f 01       	movw	r14, r30
			} while (--count);
    fc62:	0e 17       	cp	r16, r30
    fc64:	1f 07       	cpc	r17, r31
    fc66:	c1 f7       	brne	.-16     	; 0xfc58 <disk_readp+0x6c>

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    fc68:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <rcv_spi>
    fc6c:	21 97       	sbiw	r28, 0x01	; 1
    fc6e:	e1 f7       	brne	.-8      	; 0xfc68 <disk_readp+0x7c>

			res = RES_OK;
    fc70:	d0 e0       	ldi	r29, 0x00	; 0
    fc72:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}

	deselect();
    fc74:	0e 94 0e 7d 	call	0xfa1c	; 0xfa1c <deselect>

	return res;
}
    fc78:	ce 01       	movw	r24, r28
    fc7a:	cd b7       	in	r28, 0x3d	; 61
    fc7c:	de b7       	in	r29, 0x3e	; 62
    fc7e:	e8 e0       	ldi	r30, 0x08	; 8
    fc80:	0c 94 2c 7f 	jmp	0xfe58	; 0xfe58 <__epilogue_restores__+0x14>

0000fc84 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    fc84:	b0 e0       	ldi	r27, 0x00	; 0
    fc86:	a0 e0       	ldi	r26, 0x00	; 0
    fc88:	e8 e4       	ldi	r30, 0x48	; 72
    fc8a:	fe e7       	ldi	r31, 0x7E	; 126
    fc8c:	0c 94 10 7f 	jmp	0xfe20	; 0xfe20 <__prologue_saves__+0x14>
    fc90:	ec 01       	movw	r28, r24
    fc92:	6a 01       	movw	r12, r20
    fc94:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
    fc96:	02 e0       	ldi	r16, 0x02	; 2
    fc98:	10 e0       	ldi	r17, 0x00	; 0
    fc9a:	2e ef       	ldi	r18, 0xFE	; 254
    fc9c:	31 e0       	ldi	r19, 0x01	; 1
    fc9e:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
    fca2:	89 2b       	or	r24, r25
    fca4:	d1 f4       	brne	.+52     	; 0xfcda <check_fs+0x56>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    fca6:	88 81       	ld	r24, Y
    fca8:	99 81       	ldd	r25, Y+1	; 0x01
    fcaa:	85 35       	cpi	r24, 0x55	; 85
    fcac:	9a 4a       	sbci	r25, 0xAA	; 170
    fcae:	b9 f4       	brne	.+46     	; 0xfcde <check_fs+0x5a>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    fcb0:	22 e5       	ldi	r18, 0x52	; 82
    fcb2:	30 e0       	ldi	r19, 0x00	; 0
    fcb4:	b7 01       	movw	r22, r14
    fcb6:	a6 01       	movw	r20, r12
    fcb8:	ce 01       	movw	r24, r28
    fcba:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
    fcbe:	89 2b       	or	r24, r25
    fcc0:	81 f4       	brne	.+32     	; 0xfce2 <check_fs+0x5e>
    fcc2:	81 e0       	ldi	r24, 0x01	; 1
    fcc4:	28 81       	ld	r18, Y
    fcc6:	39 81       	ldd	r19, Y+1	; 0x01
    fcc8:	26 34       	cpi	r18, 0x46	; 70
    fcca:	31 44       	sbci	r19, 0x41	; 65
    fccc:	09 f4       	brne	.+2      	; 0xfcd0 <check_fs+0x4c>
    fcce:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	return 1;
}
    fcd0:	cd b7       	in	r28, 0x3d	; 61
    fcd2:	de b7       	in	r29, 0x3e	; 62
    fcd4:	e8 e0       	ldi	r30, 0x08	; 8
    fcd6:	0c 94 2c 7f 	jmp	0xfe58	; 0xfe58 <__epilogue_restores__+0x14>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
    fcda:	83 e0       	ldi	r24, 0x03	; 3
    fcdc:	f9 cf       	rjmp	.-14     	; 0xfcd0 <check_fs+0x4c>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
    fcde:	82 e0       	ldi	r24, 0x02	; 2
    fce0:	f7 cf       	rjmp	.-18     	; 0xfcd0 <check_fs+0x4c>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
    fce2:	81 e0       	ldi	r24, 0x01	; 1
    fce4:	f5 cf       	rjmp	.-22     	; 0xfcd0 <check_fs+0x4c>

0000fce6 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    fce6:	a4 e0       	ldi	r26, 0x04	; 4
    fce8:	b0 e0       	ldi	r27, 0x00	; 0
    fcea:	e9 e7       	ldi	r30, 0x79	; 121
    fcec:	fe e7       	ldi	r31, 0x7E	; 126
    fcee:	0c 94 10 7f 	jmp	0xfe20	; 0xfe20 <__prologue_saves__+0x14>
	BYTE buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    fcf2:	62 30       	cpi	r22, 0x02	; 2
    fcf4:	71 05       	cpc	r23, r1
    fcf6:	81 05       	cpc	r24, r1
    fcf8:	91 05       	cpc	r25, r1
    fcfa:	28 f4       	brcc	.+10     	; 0xfd06 <get_fat+0x20>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
    fcfc:	61 e0       	ldi	r22, 0x01	; 1
    fcfe:	70 e0       	ldi	r23, 0x00	; 0
    fd00:	80 e0       	ldi	r24, 0x00	; 0
    fd02:	90 e0       	ldi	r25, 0x00	; 0
    fd04:	35 c0       	rjmp	.+106    	; 0xfd70 <get_fat+0x8a>
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
	BYTE buf[4];
	FATFS *fs = FatFs;
    fd06:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <FatFs>
    fd0a:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <FatFs+0x1>

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    fd0e:	c6 80       	ldd	r12, Z+6	; 0x06
    fd10:	d7 80       	ldd	r13, Z+7	; 0x07
    fd12:	e0 84       	ldd	r14, Z+8	; 0x08
    fd14:	f1 84       	ldd	r15, Z+9	; 0x09
    fd16:	6c 15       	cp	r22, r12
    fd18:	7d 05       	cpc	r23, r13
    fd1a:	8e 05       	cpc	r24, r14
    fd1c:	9f 05       	cpc	r25, r15
    fd1e:	70 f7       	brcc	.-36     	; 0xfcfc <get_fat+0x16>
		return 1;

	switch (fs->fs_type) {
    fd20:	20 81       	ld	r18, Z
    fd22:	23 30       	cpi	r18, 0x03	; 3
    fd24:	59 f7       	brne	.-42     	; 0xfcfc <get_fat+0x16>
    fd26:	ab 01       	movw	r20, r22
    fd28:	bc 01       	movw	r22, r24
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
		return LD_WORD(buf);
#endif
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
    fd2a:	9a 01       	movw	r18, r20
    fd2c:	2f 77       	andi	r18, 0x7F	; 127
    fd2e:	33 27       	eor	r19, r19
    fd30:	22 0f       	add	r18, r18
    fd32:	33 1f       	adc	r19, r19
    fd34:	22 0f       	add	r18, r18
    fd36:	33 1f       	adc	r19, r19
    fd38:	97 e0       	ldi	r25, 0x07	; 7
    fd3a:	76 95       	lsr	r23
    fd3c:	67 95       	ror	r22
    fd3e:	57 95       	ror	r21
    fd40:	47 95       	ror	r20
    fd42:	9a 95       	dec	r25
    fd44:	d1 f7       	brne	.-12     	; 0xfd3a <get_fat+0x54>
    fd46:	c2 84       	ldd	r12, Z+10	; 0x0a
    fd48:	d3 84       	ldd	r13, Z+11	; 0x0b
    fd4a:	e4 84       	ldd	r14, Z+12	; 0x0c
    fd4c:	f5 84       	ldd	r15, Z+13	; 0x0d
    fd4e:	4c 0d       	add	r20, r12
    fd50:	5d 1d       	adc	r21, r13
    fd52:	6e 1d       	adc	r22, r14
    fd54:	7f 1d       	adc	r23, r15
    fd56:	04 e0       	ldi	r16, 0x04	; 4
    fd58:	10 e0       	ldi	r17, 0x00	; 0
    fd5a:	ce 01       	movw	r24, r28
    fd5c:	01 96       	adiw	r24, 0x01	; 1
    fd5e:	0e 94 f6 7d 	call	0xfbec	; 0xfbec <disk_readp>
    fd62:	89 2b       	or	r24, r25
    fd64:	59 f6       	brne	.-106    	; 0xfcfc <get_fat+0x16>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    fd66:	69 81       	ldd	r22, Y+1	; 0x01
    fd68:	7a 81       	ldd	r23, Y+2	; 0x02
    fd6a:	8b 81       	ldd	r24, Y+3	; 0x03
    fd6c:	9c 81       	ldd	r25, Y+4	; 0x04
    fd6e:	9f 70       	andi	r25, 0x0F	; 15
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    fd70:	24 96       	adiw	r28, 0x04	; 4
    fd72:	e8 e0       	ldi	r30, 0x08	; 8
    fd74:	0c 94 2c 7f 	jmp	0xfe58	; 0xfe58 <__epilogue_restores__+0x14>

0000fd78 <memset>:
    fd78:	dc 01       	movw	r26, r24
    fd7a:	01 c0       	rjmp	.+2      	; 0xfd7e <memset+0x6>
    fd7c:	6d 93       	st	X+, r22
    fd7e:	41 50       	subi	r20, 0x01	; 1
    fd80:	50 40       	sbci	r21, 0x00	; 0
    fd82:	e0 f7       	brcc	.-8      	; 0xfd7c <memset+0x4>
    fd84:	08 95       	ret

0000fd86 <eeprom_read_byte>:
    fd86:	f9 99       	sbic	0x1f, 1	; 31
    fd88:	fe cf       	rjmp	.-4      	; 0xfd86 <eeprom_read_byte>
    fd8a:	92 bd       	out	0x22, r25	; 34
    fd8c:	81 bd       	out	0x21, r24	; 33
    fd8e:	f8 9a       	sbi	0x1f, 0	; 31
    fd90:	99 27       	eor	r25, r25
    fd92:	80 b5       	in	r24, 0x20	; 32
    fd94:	08 95       	ret

0000fd96 <eeprom_write_byte>:
    fd96:	26 2f       	mov	r18, r22

0000fd98 <eeprom_write_r18>:
    fd98:	f9 99       	sbic	0x1f, 1	; 31
    fd9a:	fe cf       	rjmp	.-4      	; 0xfd98 <eeprom_write_r18>
    fd9c:	1f ba       	out	0x1f, r1	; 31
    fd9e:	92 bd       	out	0x22, r25	; 34
    fda0:	81 bd       	out	0x21, r24	; 33
    fda2:	20 bd       	out	0x20, r18	; 32
    fda4:	0f b6       	in	r0, 0x3f	; 63
    fda6:	f8 94       	cli
    fda8:	fa 9a       	sbi	0x1f, 2	; 31
    fdaa:	f9 9a       	sbi	0x1f, 1	; 31
    fdac:	0f be       	out	0x3f, r0	; 63
    fdae:	01 96       	adiw	r24, 0x01	; 1
    fdb0:	08 95       	ret

0000fdb2 <__udivmodsi4>:
    fdb2:	a1 e2       	ldi	r26, 0x21	; 33
    fdb4:	1a 2e       	mov	r1, r26
    fdb6:	aa 1b       	sub	r26, r26
    fdb8:	bb 1b       	sub	r27, r27
    fdba:	fd 01       	movw	r30, r26
    fdbc:	0d c0       	rjmp	.+26     	; 0xfdd8 <__udivmodsi4_ep>

0000fdbe <__udivmodsi4_loop>:
    fdbe:	aa 1f       	adc	r26, r26
    fdc0:	bb 1f       	adc	r27, r27
    fdc2:	ee 1f       	adc	r30, r30
    fdc4:	ff 1f       	adc	r31, r31
    fdc6:	a2 17       	cp	r26, r18
    fdc8:	b3 07       	cpc	r27, r19
    fdca:	e4 07       	cpc	r30, r20
    fdcc:	f5 07       	cpc	r31, r21
    fdce:	20 f0       	brcs	.+8      	; 0xfdd8 <__udivmodsi4_ep>
    fdd0:	a2 1b       	sub	r26, r18
    fdd2:	b3 0b       	sbc	r27, r19
    fdd4:	e4 0b       	sbc	r30, r20
    fdd6:	f5 0b       	sbc	r31, r21

0000fdd8 <__udivmodsi4_ep>:
    fdd8:	66 1f       	adc	r22, r22
    fdda:	77 1f       	adc	r23, r23
    fddc:	88 1f       	adc	r24, r24
    fdde:	99 1f       	adc	r25, r25
    fde0:	1a 94       	dec	r1
    fde2:	69 f7       	brne	.-38     	; 0xfdbe <__udivmodsi4_loop>
    fde4:	60 95       	com	r22
    fde6:	70 95       	com	r23
    fde8:	80 95       	com	r24
    fdea:	90 95       	com	r25
    fdec:	9b 01       	movw	r18, r22
    fdee:	ac 01       	movw	r20, r24
    fdf0:	bd 01       	movw	r22, r26
    fdf2:	cf 01       	movw	r24, r30
    fdf4:	08 95       	ret

0000fdf6 <__muluhisi3>:
    fdf6:	0e 94 3d 7f 	call	0xfe7a	; 0xfe7a <__umulhisi3>
    fdfa:	a5 9f       	mul	r26, r21
    fdfc:	90 0d       	add	r25, r0
    fdfe:	b4 9f       	mul	r27, r20
    fe00:	90 0d       	add	r25, r0
    fe02:	a4 9f       	mul	r26, r20
    fe04:	80 0d       	add	r24, r0
    fe06:	91 1d       	adc	r25, r1
    fe08:	11 24       	eor	r1, r1
    fe0a:	08 95       	ret

0000fe0c <__prologue_saves__>:
    fe0c:	2f 92       	push	r2
    fe0e:	3f 92       	push	r3
    fe10:	4f 92       	push	r4
    fe12:	5f 92       	push	r5
    fe14:	6f 92       	push	r6
    fe16:	7f 92       	push	r7
    fe18:	8f 92       	push	r8
    fe1a:	9f 92       	push	r9
    fe1c:	af 92       	push	r10
    fe1e:	bf 92       	push	r11
    fe20:	cf 92       	push	r12
    fe22:	df 92       	push	r13
    fe24:	ef 92       	push	r14
    fe26:	ff 92       	push	r15
    fe28:	0f 93       	push	r16
    fe2a:	1f 93       	push	r17
    fe2c:	cf 93       	push	r28
    fe2e:	df 93       	push	r29
    fe30:	cd b7       	in	r28, 0x3d	; 61
    fe32:	de b7       	in	r29, 0x3e	; 62
    fe34:	ca 1b       	sub	r28, r26
    fe36:	db 0b       	sbc	r29, r27
    fe38:	0f b6       	in	r0, 0x3f	; 63
    fe3a:	f8 94       	cli
    fe3c:	de bf       	out	0x3e, r29	; 62
    fe3e:	0f be       	out	0x3f, r0	; 63
    fe40:	cd bf       	out	0x3d, r28	; 61
    fe42:	09 94       	ijmp

0000fe44 <__epilogue_restores__>:
    fe44:	2a 88       	ldd	r2, Y+18	; 0x12
    fe46:	39 88       	ldd	r3, Y+17	; 0x11
    fe48:	48 88       	ldd	r4, Y+16	; 0x10
    fe4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    fe4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    fe4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    fe50:	8c 84       	ldd	r8, Y+12	; 0x0c
    fe52:	9b 84       	ldd	r9, Y+11	; 0x0b
    fe54:	aa 84       	ldd	r10, Y+10	; 0x0a
    fe56:	b9 84       	ldd	r11, Y+9	; 0x09
    fe58:	c8 84       	ldd	r12, Y+8	; 0x08
    fe5a:	df 80       	ldd	r13, Y+7	; 0x07
    fe5c:	ee 80       	ldd	r14, Y+6	; 0x06
    fe5e:	fd 80       	ldd	r15, Y+5	; 0x05
    fe60:	0c 81       	ldd	r16, Y+4	; 0x04
    fe62:	1b 81       	ldd	r17, Y+3	; 0x03
    fe64:	aa 81       	ldd	r26, Y+2	; 0x02
    fe66:	b9 81       	ldd	r27, Y+1	; 0x01
    fe68:	ce 0f       	add	r28, r30
    fe6a:	d1 1d       	adc	r29, r1
    fe6c:	0f b6       	in	r0, 0x3f	; 63
    fe6e:	f8 94       	cli
    fe70:	de bf       	out	0x3e, r29	; 62
    fe72:	0f be       	out	0x3f, r0	; 63
    fe74:	cd bf       	out	0x3d, r28	; 61
    fe76:	ed 01       	movw	r28, r26
    fe78:	08 95       	ret

0000fe7a <__umulhisi3>:
    fe7a:	a2 9f       	mul	r26, r18
    fe7c:	b0 01       	movw	r22, r0
    fe7e:	b3 9f       	mul	r27, r19
    fe80:	c0 01       	movw	r24, r0
    fe82:	a3 9f       	mul	r26, r19
    fe84:	70 0d       	add	r23, r0
    fe86:	81 1d       	adc	r24, r1
    fe88:	11 24       	eor	r1, r1
    fe8a:	91 1d       	adc	r25, r1
    fe8c:	b2 9f       	mul	r27, r18
    fe8e:	70 0d       	add	r23, r0
    fe90:	81 1d       	adc	r24, r1
    fe92:	11 24       	eor	r1, r1
    fe94:	91 1d       	adc	r25, r1
    fe96:	08 95       	ret

0000fe98 <_exit>:
    fe98:	f8 94       	cli

0000fe9a <__stop_program>:
    fe9a:	ff cf       	rjmp	.-2      	; 0xfe9a <__stop_program>

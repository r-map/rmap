Beginning sstream test
Starting testing 2 2
Character getted: a
Character getted: b
input buffer: abcdefg
Character 0: a, character 1: b
f (should be 2.35): 2.35
i (should be 5): 5
s (should be Test): Test
Buffer after flag clear: 2.35 5 Test
Combining read and write activities
Read out: '2.5'
Read out: 'ing'
Current buffer value: 2.5 ing data
Appending more text by a number of methods
String stream text:2.5 trd


4635
String stream test:2.5 trd


4635
Checking ostringstream
Test string 5 3.5 Another test string 
abcdefghiojklmnopqrstuvwxyz 
abcdefghiojklmnopqrstuvwxyz 
abcdefghiojklmnopqrstuvwxyz 
abcdefghiojklmnopqrstuvwxyz 
Test string

Checking __istream_readin<traits, char, bool>
no manipulator: true >> bool == "0" (expected 0), ok
no manipulator: True >> bool == "0" (expected 0), ok
no manipulator: TRUE >> bool == "0" (expected 0), ok
no manipulator: false >> bool == "0" (expected 0), ok
no manipulator: -1 >> bool == "1" (expected 1), ok
no manipulator: 0 >> bool == "0" (expected 0), ok
no manipulator: 1 >> bool == "1" (expected 1), ok
no manipulator: 2 >> bool == "1" (expected 1), ok
no manip., hex: true >> bool == "0" (expected 0), ok
no manip., hex: True >> bool == "0" (expected 0), ok
no manip., hex: TRUE >> bool == "0" (expected 0), ok
no manip., hex: false >> bool == "1" (expected 1), ok
no manip., hex: -0x1 >> bool == "1" (expected 1), ok
no manip., hex: 0x0 >> bool == "0" (expected 0), ok
no manip., hex: 0x1 >> bool == "1" (expected 1), ok
no manip., hex: 0x2 >> bool == "1" (expected 1), ok
noboolalpha   : true >> bool == "0" (expected 0), ok
noboolalpha   : True >> bool == "0" (expected 0), ok
noboolalpha   : TRUE >> bool == "0" (expected 0), ok
noboolalpha   : false >> bool == "0" (expected 0), ok
noboolalpha   : -1 >> bool == "1" (expected 1), ok
noboolalpha   : 0 >> bool == "0" (expected 0), ok
noboolalpha   : 1 >> bool == "1" (expected 1), ok
noboolalpha   : 2 >> bool == "1" (expected 1), ok
boolalpha     : true >> bool == "1" (expected 1), ok
boolalpha     : True >> bool == "0" (expected 0), ok
boolalpha     : TRUE >> bool == "0" (expected 0), ok
boolalpha     : false >> bool == "0" (expected 0), ok
boolalpha     : -1 >> bool == "0" (expected 0), ok
boolalpha     : 0 >> bool == "0" (expected 0), ok
boolalpha     : 1 >> bool == "0" (expected 0), ok
boolalpha     : 2 >> bool == "0" (expected 0), ok


# Generated by Django 2.2.17 on 2022-04-08 10:57

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import rmap.stations.models

def create_superuser(apps, schema_editor):
    
    from django.core.management import call_command
    call_command("createsuperuser",username="rmap",email="rmap@rmap.cc",interactive=False) 

    from django.contrib.auth.models import User
    u = User.objects.get(username__exact='rmap')
    u.set_password('rmap')
    u.save()

def delete_superuser(apps, schema_editor):

    #MyModel = apps.get_model("stations", "UserProfile")
    #MyModel.objects.get(user=apps.get_model("auth", "User").objects.get(username="rmap")).delete()
    #apps.get_model("auth", "User").objects.get(username="rmap").delete()

    from django.contrib.auth.models import User
    u = User.objects.get(username__exact='rmap')
    u.delete()

class Migration(migrations.Migration):

    replaces = [('stations', '0001_initial'), ('stations', '0002_initial'), ('stations', '0003_fixture'), ('stations', '0004_auto_20151029_0818'), ('stations', '0005_auto_20151128_0940'), ('stations', '0006_auto_20160216_1722'), ('stations', '0007_auto_20160718_1028'), ('stations', '0008_auto_20160824_1709'), ('stations', '0009_auto_20161014_1320'), ('stations', '0010_auto_20161221_1800'), ('stations', '0012_auto_20170120_0909'), ('stations', '0014_auto_20170410_1856'), ('stations', '0015_auto_20170417_2117'), ('stations', '0016_auto_20171116_1953'), ('stations', '0017_fixture'), ('stations', '0018_auto_20180104_1233'), ('stations', '0019_fixture'), ('stations', '0020_auto_20180503_1015'), ('stations', '0021_auto_20180503_2340'), ('stations', '0022_fixture'), ('stations', '0023_auto_20180822_1357'), ('stations', '0024_fixture'), ('stations', '0025_fixture'), ('stations', '0026_fixture'), ('stations', '0027_fixture'), ('stations', '0028_auto_20210224_2202'), ('stations', '0029_stationimage'), ('stations', '0030_auto_20210527_0851'), ('stations', '0031_auto_20210902_1031'), ('stations', '0032_auto_20210902_1034')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='station name', max_length=255)),
                ('active', models.BooleanField(default=False, help_text='Activate the board for measurements', verbose_name='Active')),
                ('slug', models.SlugField(help_text='Auto-generated from name.', unique=True)),
                ('category', models.CharField(choices=[(b'base', b'Raspberry base'), (b'master', b'Mega2560 master'), (b'satellite', b'Microduino core+ satellite'), (b'gsm', b'Microduino core+ GSM/GPRS with GPS'), (b'bluetooth', b'Microduino core+ with Bluetooth module')], max_length=50)),
            ],
            options={
                'ordering': ['slug'],
                'verbose_name': 'hardware board',
                'verbose_name_plural': 'hardware boards',
            },
        ),
        migrations.CreateModel(
            name='StationMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='station name', max_length=255)),
                ('active', models.BooleanField(default=True, help_text='Activate the station for measurements', verbose_name='Active')),
                ('slug', models.SlugField(help_text='Auto-generated from name.', unique=True)),
                ('lat', models.FloatField(default=None, help_text='Precise Latitude of the station', verbose_name='Latitude')),
                ('lon', models.FloatField(default=None, help_text='Precise Longitude of the station', verbose_name='Longitude')),
                ('network', models.CharField(default=b'rmap', help_text='station network', max_length=50)),
                ('mqttrootpath', models.CharField(default=b'rmap', help_text='root mqtt path for publish', max_length=100)),
                ('mqttmaintpath', models.CharField(default=b'rmap', help_text='maint mqtt path for publish', max_length=100)),
                ('category', models.CharField(choices=[(b'good', b'Beautifull & Good'), (b'bad', b'Bad & Wrong'), (b'test', b'Test & Bugs'), (b'unknown', b'Unknown & Missing')], help_text='Category of the station', max_length=50)),
                ('ident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['slug'],
                'verbose_name': 'station',
                'verbose_name_plural': 'stations',
                'unique_together': {('slug', 'ident')},
            },
        ),
        migrations.CreateModel(
            name='TransportAmqp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('amqpserver', models.CharField(default=b'rmap.cc', help_text='AMQP server', max_length=50)),
                ('exchange', models.CharField(default=b'rmap', help_text='AMQP remote exchange name', max_length=50)),
                ('queue', models.CharField(default=b'rmap', help_text='AMQP local queue name', max_length=50)),
                ('amqpuser', models.CharField(blank=True, default=b'', help_text='AMQP user', max_length=9)),
                ('amqppassword', models.CharField(blank=True, default=b'', help_text='AMQP password', max_length=50)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
        ),
        migrations.CreateModel(
            name='TransportBluetooth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('name', models.CharField(help_text='bluetooth name', max_length=80)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'bluetooth transport',
                'verbose_name_plural': 'bluetooth transport',
            },
        ),
        migrations.CreateModel(
            name='TransportMqtt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('mqttsampletime', models.PositiveIntegerField(default=5, help_text='interval in seconds for publish')),
                ('mqttserver', models.CharField(default=b'mqttserver', help_text='MQTT server', max_length=50)),
                ('mqttuser', models.CharField(blank=True, default=b'', help_text='MQTT user', max_length=9)),
                ('mqttpassword', models.CharField(blank=True, default=b'', help_text='MQTT password', max_length=50)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'ordering': ['mqttserver'],
                'verbose_name': 'MQTT transport',
                'verbose_name_plural': 'MQTT transport',
            },
        ),
        migrations.CreateModel(
            name='TransportTcpip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('name', models.CharField(choices=[(b'master', b'master board 1'), (b'master2', b'master board 2'), (b'master3', b'master board 3'), (b'master4', b'master board 4')], default=b'master', help_text='Name DSN solved (for master board only)', max_length=50)),
                ('ntpserver', models.CharField(default=b'ntpserver', help_text='Network time server (NTP)', max_length=50)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'tcp/ip DNS resoved name',
                'verbose_name_plural': 'tcp/ip DNS resoved names',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted_license', models.BooleanField(default=False, help_text='You need to accept ODBL license to provide your data', verbose_name='I accept ODBL license')),
                ('certification', models.CharField(default=b'ARPA-ER', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='board',
            name='stationmetadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stations.StationMetadata'),
        ),
        migrations.AlterField(
            model_name='board',
            name='slug',
            field=models.SlugField(help_text='Auto-generated from name.'),
        ),
        migrations.CreateModel(
            name='TransportRF24Network',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('node', models.PositiveIntegerField(choices=[(0, b'RF24 Network node 0'), (1, b'RF24 Network node 01'), (2, b'RF24 Network node 02'), (3, b'RF24 Network node 03'), (4, b'RF24 Network node 04'), (5, b'RF24 Network node 05')], default=0, help_text='Node ID for RF24 Network')),
                ('channel', models.PositiveIntegerField(choices=[(90, b'RF24 Network node channel 90'), (91, b'RF24 Network node channel 91'), (92, b'RF24 Network node channel 92'), (93, b'RF24 Network node channel 93'), (94, b'RF24 Network node channel 94'), (95, b'RF24 Network node channel 95')], default=93, help_text='Channel number for RF24')),
                ('key', models.CommaSeparatedIntegerField(blank=True, choices=[(b'0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 1'), (b'0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 2'), (b'0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 3'), (b'0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', b'preset 4'), (b'0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', b'preset 5'), (b'0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', b'preset 6'), (b'0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', b'preset 7'), (b'0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', b'preset 8'), (b'0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', b'preset 9')], help_text='AES key', max_length=47)),
                ('iv', models.CommaSeparatedIntegerField(blank=True, choices=[(b'0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 1'), (b'0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 2'), (b'0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 3'), (b'0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', b'preset 4'), (b'0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', b'preset 5'), (b'0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', b'preset 6'), (b'0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', b'preset 7'), (b'0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', b'preset 8'), (b'0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', b'preset 9')], help_text='AES cbc iv', max_length=47)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'ordering': ['node'],
                'verbose_name': 'RF24 Network node',
                'verbose_name_plural': 'RF24 Network nodes',
            },
        ),
        migrations.CreateModel(
            name='TransportSerial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('baudrate', models.PositiveIntegerField(choices=[(9600, b'9600'), (19200, b'19200'), (38400, b'38400'), (11520, b'115200')], default=9600, help_text='Baud rate')),
                ('device', models.CharField(choices=[(b'COM1', b'windows COM1'), (b'COM2', b'windows COM2'), (b'COM3', b'windows COM3'), (b'COM4', b'windows COM4'), (b'COM5', b'windows COM5'), (b'COM6', b'windows COM6'), (b'COM7', b'windows COM7'), (b'COM8', b'windows COM8'), (b'COM9', b'windows COM9'), (b'COM10', b'windows COM10'), (b'COM11', b'windows COM11'), (b'COM12', b'windows COM12'), (b'COM13', b'windows COM13'), (b'COM14', b'windows COM14'), (b'COM15', b'windows COM15'), (b'COM16', b'windows COM16'), (b'COM17', b'windows COM17'), (b'COM18', b'windows COM18'), (b'COM19', b'windows COM19'), (b'/dev/ttyUSB0', b'Linux ttyUSB0'), (b'/dev/ttyUSB1', b'Linux ttyUSB1'), (b'/dev/ttyUSB2', b'Linux ttyUSB2'), (b'/dev/ttyUSB3', b'Linux ttyUSB3'), (b'/dev/ttyUSB4', b'Linux ttyUSB4'), (b'/dev/ttyACM0', b'Linux ttyACM0'), (b'/dev/ttyACM1', b'Linux ttyACM1'), (b'/dev/ttyACM2', b'Linux ttyACM2'), (b'/dev/ttyACM3', b'Linux ttyACM3'), (b'/dev/ttyACM4', b'Linux ttyACM4'), (b'/dev/rfcomm0', b'Linux rfcomm0'), (b'/dev/rfcomm1', b'Linux rfcomm1'), (b'/dev/rfcomm2', b'Linux rfcomm2'), (b'/dev/tty.HC-05-DevB', b'OSX tty.HC-05-DevB')], default=b'/dev/ttyUSB0', help_text='Serial device', max_length=30)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'ordering': ['board'],
                'verbose_name': 'serial transport',
                'verbose_name_plural': 'serial transports',
            },
        ),
        migrations.AlterUniqueTogether(
            name='board',
            unique_together={('slug', 'stationmetadata')},
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this sensor to take measurements', verbose_name='Active')),
                ('name', models.CharField(default=b'my sensor', help_text='Descriptive text', max_length=50)),
                ('driver', models.CharField(choices=[(b'I2C', b'I2C drivers'), (b'RF24', b'RF24 Network jsonrpc'), (b'JRPC', b'INDIRECT jsonrpc over some transport')], default=b'TMP', help_text='Driver to use', max_length=4)),
                ('type', models.CharField(choices=[(b'TMP', b'I2C TMP temperature sensor'), (b'ADT', b'I2C ADT temperature sensor'), (b'BMP', b'I2C BMP085/BMP180 pressure sensor'), (b'HIH', b'I2C HIH6100 series humidity sensor'), (b'DW1', b'I2C Davis wind direction and intensity adapter'), (b'TBR', b'I2C Tipping bucket rain gauge adapter'), (b'RF24', b'RF24 Network jsonrpc')], default=b'TMP', help_text='Type of sensor', max_length=4)),
                ('i2cbus', models.PositiveIntegerField(blank=True, default=1, help_text='I2C bus number (for raspberry only)')),
                ('address', models.PositiveIntegerField(default=72, help_text='I2C ddress (decimal)')),
                ('node', models.PositiveIntegerField(blank=True, default=1, help_text='RF24Network node ddress')),
                ('timerange', models.CharField(default=b'254,0,0', help_text='Sensor metadata from rmap RFC', max_length=50)),
                ('level', models.CharField(default=b'103,2000,-,-', help_text='Sensor metadata from rmap RFC', max_length=50)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'ordering': ['driver'],
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensors',
                'unique_together': {('name', 'board')},
            },
        ),
        migrations.CreateModel(
            name='StationConstantData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, help_text='Activate this metadata', verbose_name='Active')),
                ('btable', models.CharField(choices=[(b'B01019', b'LONG STATION OR SITE NAME                                        (CCITTIA5)'), (b'B02001', b'TYPE OF STATION                                                  (CODE TABLE 2001)'), (b'B02002', b'TYPE OF INSTRUMENTATION FOR WIND MEASUREMENT                     (FLAG TABLE 2002)'), (b'B02003', b'TYPE OF MEASURING EQUIPMENT USED                                 (CODE TABLE 2003)'), (b'B02004', b'TYPE OF INSTRUMENTATION FOR EVAPORATION MEASUREMENT OR TYPE OF C (CODE TABLE 2004)'), (b'B02005', b'PRECISION OF TEMPERATURE OBSERVATION                             (K*100)'), (b'B02038', b'METHOD OF WATER TEMPERATURE AND/OR SALINITY MEASUREMENT          (CODE TABLE 2038)'), (b'B02039', b'METHOD OF WET-BULB TEMPERATURE MEASUREMENT                       (CODE TABLE 2039)'), (b'B07030', b'HEIGHT OF STATION GROUND ABOVE MEAN SEA LEVEL (SEE NOTE 3)       (m*10)'), (b'B07031', b'HEIGHT OF BAROMETER ABOVE MEAN SEA LEVEL (SEE NOTE 4)            (m*10)')], help_text='A code to define the metadata. See rmap RFC', max_length=6)),
                ('value', models.CharField(help_text='value for associated B table', max_length=32)),
                ('stationmetadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stations.StationMetadata')),
            ],
            options={
                'ordering': ['btable'],
                'verbose_name': 'Station constant metadata',
                'verbose_name_plural': 'Station constant metadata',
                'unique_together': {('btable', 'stationmetadata')},
            },
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='slug',
            field=models.SlugField(help_text='Auto-generated from name.'),
        ),
        migrations.AlterField(
            model_name='transportserial',
            name='device',
            field=models.CharField(choices=[(b'COM1', b'windows COM1'), (b'COM2', b'windows COM2'), (b'COM3', b'windows COM3'), (b'COM4', b'windows COM4'), (b'COM5', b'windows COM5'), (b'COM6', b'windows COM6'), (b'COM7', b'windows COM7'), (b'COM8', b'windows COM8'), (b'COM9', b'windows COM9'), (b'COM10', b'windows COM10'), (b'COM11', b'windows COM11'), (b'COM12', b'windows COM12'), (b'COM13', b'windows COM13'), (b'COM14', b'windows COM14'), (b'COM15', b'windows COM15'), (b'COM16', b'windows COM16'), (b'COM17', b'windows COM17'), (b'COM18', b'windows COM18'), (b'COM19', b'windows COM19'), (b'/dev/ttyUSB0', b'Linux ttyUSB0'), (b'/dev/ttyUSB1', b'Linux ttyUSB1'), (b'/dev/ttyUSB2', b'Linux ttyUSB2'), (b'/dev/ttyUSB3', b'Linux ttyUSB3'), (b'/dev/ttyUSB4', b'Linux ttyUSB4'), (b'/dev/ttyACM0', b'Linux ttyACM0'), (b'/dev/ttyACM1', b'Linux ttyACM1'), (b'/dev/ttyACM2', b'Linux ttyACM2'), (b'/dev/ttyACM3', b'Linux ttyACM3'), (b'/dev/ttyACM4', b'Linux ttyACM4'), (b'/dev/rfcomm0', b'Linux rfcomm0'), (b'/dev/rfcomm1', b'Linux rfcomm1'), (b'/dev/rfcomm2', b'Linux rfcomm2'), (b'/dev/tty.HC-05-DevB', b'OSX tty.HC-05-DevB'), (b'/dev/tty.usbserial', b'OSX tty.usbserial')], default=b'/dev/ttyUSB0', help_text='Serial device', max_length=30),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='type',
            field=models.CharField(choices=[(b'TMP', b'I2C TMP temperature sensor'), (b'ADT', b'I2C ADT temperature sensor'), (b'BMP', b'I2C BMP085/BMP180 pressure sensor'), (b'HIH', b'I2C HIH6100 series humidity sensor'), (b'DW1', b'I2C Davis/Inspeed/Windsonic wind direction and intensity adapter'), (b'TBR', b'I2C Tipping bucket rain gauge adapter'), (b'RF24', b'RF24 Network jsonrpc')], default=b'TMP', help_text='Type of sensor', max_length=4),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='type',
            field=models.CharField(choices=[(b'TMP', b'I2C TMP temperature sensor'), (b'ADT', b'I2C ADT temperature sensor'), (b'BMP', b'I2C BMP085/BMP180 pressure sensor'), (b'HIH', b'I2C HIH6100 series humidity sensor'), (b'DW1', b'I2C Davis/Inspeed/Windsonic wind direction and intensity adapter'), (b'TBR', b'I2C Tipping bucket rain gauge adapter'), (b'RF24', b'RF24 Network jsonrpc'), (b'STH', b'I2C TH module, one shot mode'), (b'ITH', b'I2C TH module, report mode, istantaneous values'), (b'NTH', b'I2C TH module, report mode, minimum values'), (b'MTH', b'I2C TH module, report mode, mean values'), (b'XTH', b'I2C TH module, report mode, maximum values')], default=b'TMP', help_text='Type of sensor', max_length=4),
        ),
        migrations.AlterField(
            model_name='transportserial',
            name='baudrate',
            field=models.PositiveIntegerField(choices=[(9600, b'9600'), (19200, b'19200'), (38400, b'38400'), (115200, b'115200')], default=9600, help_text='Baud rate'),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='name',
            field=models.CharField(default=b'My station', help_text='station name', max_length=255),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='type',
            field=models.CharField(choices=[(b'TMP', b'I2C TMP temperature sensor'), (b'ADT', b'I2C ADT temperature sensor'), (b'BMP', b'I2C BMP085/BMP180 pressure sensor'), (b'HIH', b'I2C HIH6100 series humidity sensor'), (b'DW1', b'I2C Davis/Inspeed/Windsonic wind direction and intensity adapter'), (b'TBR', b'I2C Tipping bucket rain gauge adapter'), (b'RF24', b'RF24 Network jsonrpc'), (b'STH', b'I2C TH module, one shot mode'), (b'ITH', b'I2C TH module, report mode, istantaneous values'), (b'NTH', b'I2C TH module, report mode, minimum values'), (b'MTH', b'I2C TH module, report mode, mean values'), (b'XTH', b'I2C TH module, report mode, maximum values'), (b'SSD', b'I2C SDS011 module, one shot mode')], default=b'TMP', help_text='Type of sensor', max_length=4),
        ),
        migrations.CreateModel(
            name='Bcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bcode', models.CharField(default=b'B00000', help_text='Bcode as defined in dballe btable', max_length=6, unique=True)),
                ('description', models.CharField(default=b'Undefined', help_text='Descriptive text', max_length=100)),
                ('unit', models.CharField(default=b'Undefined', help_text='Units of measure', max_length=20)),
                ('offset', models.FloatField(default=0.0, help_text='Offset coeficent to convert units')),
                ('scale', models.FloatField(default=1.0, help_text='Scale coeficent to convert units')),
                ('userunit', models.CharField(default=b'Undefined', help_text='units of measure', max_length=20)),
            ],
            options={
                'ordering': ['bcode'],
                'verbose_name': 'Variable Bcode',
                'verbose_name_plural': 'Variable Bcode',
            },
        ),
        migrations.CreateModel(
            name='SensorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, help_text='Activate this sensor to take measurements', verbose_name='Active')),
                ('name', models.CharField(default=b'my sensor type', help_text='Descriptive text', max_length=100)),
                ('type', models.CharField(default=b'TMP', help_text='Type of sensor', max_length=4, unique=True)),
                ('bcodes', models.ManyToManyField(help_text='Bcode variable definition', to='stations.Bcode')),
                ('datalevel', models.CharField(choices=[(b'sample', b'Sensor provide data at Level I (sample)'), (b'report', b'Sensor provide data at Level II (report)')], default=b'sample', help_text='Data Level as defined by WMO (Sensor metadata from rmap RFC)', max_length=10)),
            ],
            options={
                'ordering': ['type'],
                'verbose_name': 'Sensor Type',
                'verbose_name_plural': 'Sensors Type',
            },
        ),
        migrations.AlterField(
            model_name='sensor',
            name='type',
            field=models.ForeignKey(help_text='Type of sensor', on_delete=django.db.models.deletion.CASCADE, to='stations.SensorType'),
        ),
        migrations.AlterField(
            model_name='transporttcpip',
            name='name',
            field=models.CharField(choices=[(b'master', b'master board 1'), (b'master2', b'master board 2'), (b'master3', b'master board 3'), (b'master4', b'master board 4'), (b'stima', b'master stima 1'), (b'stima2', b'master stima 2'), (b'stima3', b'master stima 3'), (b'stima4', b'master stima 4')], default=b'master', help_text='Name DSN solved (for master board only)', max_length=50),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='driver',
            field=models.CharField(choices=[(b'I2C', b'I2C drivers'), (b'RF24', b'RF24 Network jsonrpc'), (b'JRPC', b'INDIRECT jsonrpc over some transport')], default=b'I2C', help_text='Driver to use', max_length=4),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='mqttmaintpath',
            field=models.CharField(default=b'sample', help_text='maint mqtt path for publish', max_length=100),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='mqttrootpath',
            field=models.CharField(default=b'sample', help_text='root mqtt path for publish', max_length=100),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='network',
            field=models.CharField(choices=[(b'fixed', b'For station with fixed coordinate'), (b'mobile', b'For station with mobile coordinate')], default=b'fixed', help_text='station network', max_length=50),
        ),
        migrations.AddField(
            model_name='transporttcpip',
            name='gsmapn',
            field=models.CharField(default='ibox.tim.it', help_text='APN for gsm access', max_length=50),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='mqttmaintpath',
            field=models.CharField(default=b'maint', help_text='maint mqtt path for publish', max_length=100),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='driver',
            field=models.CharField(choices=[(b'I2C', b'I2C drivers'), (b'RF24', b'RF24 Network jsonrpc'), (b'SERI', b'SERIAL drivers over serial port'), (b'JRPC', b'INDIRECT jsonrpc over some transport')], default=b'I2C', help_text='Driver to use', max_length=4),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='iv',
            field=models.CharField(blank=True, choices=[(b'0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 1'), (b'0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 2'), (b'0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 3'), (b'0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', b'preset 4'), (b'0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', b'preset 5'), (b'0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', b'preset 6'), (b'0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', b'preset 7'), (b'0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', b'preset 8'), (b'0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', b'preset 9')], help_text='AES cbc iv', max_length=47, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='key',
            field=models.CharField(blank=True, choices=[(b'0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 1'), (b'0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 2'), (b'0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', b'preset 3'), (b'0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', b'preset 4'), (b'0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', b'preset 5'), (b'0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', b'preset 6'), (b'0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', b'preset 7'), (b'0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', b'preset 8'), (b'0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', b'preset 9')], help_text='AES key', max_length=47, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.CreateModel(
            name='BoardFirmwareMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac', models.CharField(blank=True, default=b'', help_text='MAC address', max_length=128)),
                ('swversion', models.CharField(blank=True, default=b'', help_text='Software version', max_length=255)),
                ('swlastupdate', models.DateTimeField(blank=True, help_text='Software last update date', null=True)),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
        ),
        migrations.AlterField(
            model_name='bcode',
            name='bcode',
            field=models.CharField(default='B00000', help_text='Bcode as defined in dballe btable', max_length=6, unique=True),
        ),
        migrations.AlterField(
            model_name='bcode',
            name='description',
            field=models.CharField(default='Undefined', help_text='Descriptive text', max_length=100),
        ),
        migrations.AlterField(
            model_name='bcode',
            name='unit',
            field=models.CharField(default='Undefined', help_text='Units of measure', max_length=20),
        ),
        migrations.AlterField(
            model_name='bcode',
            name='userunit',
            field=models.CharField(default='Undefined', help_text='units of measure', max_length=20),
        ),
        migrations.AlterField(
            model_name='board',
            name='category',
            field=models.CharField(choices=[('base', 'Raspberry base'), ('master', 'Mega2560 master'), ('satellite', 'Microduino core+ satellite'), ('gsm', 'Microduino core+ GSM/GPRS with GPS'), ('bluetooth', 'Microduino core+ with Bluetooth module')], max_length=50),
        ),
        migrations.AlterField(
            model_name='boardfirmwaremetadata',
            name='mac',
            field=models.CharField(blank=True, default='', help_text='MAC address', max_length=128),
        ),
        migrations.AlterField(
            model_name='boardfirmwaremetadata',
            name='swversion',
            field=models.CharField(blank=True, default='', help_text='Software version', max_length=255),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='driver',
            field=models.CharField(choices=[('I2C', 'I2C drivers'), ('RF24', 'RF24 Network jsonrpc'), ('SERI', 'SERIAL drivers over serial port'), ('JRPC', 'INDIRECT jsonrpc over some transport')], default='I2C', help_text='Driver to use', max_length=4),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='level',
            field=models.CharField(default='103,2000,-,-', help_text='Sensor metadata from rmap RFC', max_length=50),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='name',
            field=models.CharField(default='my sensor', help_text='Descriptive text', max_length=50),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='timerange',
            field=models.CharField(default='254,0,0', help_text='Sensor metadata from rmap RFC', max_length=50),
        ),
        migrations.AlterField(
            model_name='sensortype',
            name='datalevel',
            field=models.CharField(choices=[('sample', 'Sensor provide data at Level I (sample)'), ('report', 'Sensor provide data at Level II (report)')], default='sample', help_text='Data Level as defined by WMO (Sensor metadata from rmap RFC)', max_length=10),
        ),
        migrations.AlterField(
            model_name='sensortype',
            name='name',
            field=models.CharField(default='my sensor type', help_text='Descriptive text', max_length=100),
        ),
        migrations.AlterField(
            model_name='sensortype',
            name='type',
            field=models.CharField(default='TMP', help_text='Type of sensor', max_length=4, unique=True),
        ),
        migrations.AlterField(
            model_name='stationconstantdata',
            name='btable',
            field=models.CharField(choices=[('B01019', 'LONG STATION OR SITE NAME                                        (CCITTIA5)'), ('B02001', 'TYPE OF STATION                                                  (CODE TABLE 2001)'), ('B02002', 'TYPE OF INSTRUMENTATION FOR WIND MEASUREMENT                     (FLAG TABLE 2002)'), ('B02003', 'TYPE OF MEASURING EQUIPMENT USED                                 (CODE TABLE 2003)'), ('B02004', 'TYPE OF INSTRUMENTATION FOR EVAPORATION MEASUREMENT OR TYPE OF C (CODE TABLE 2004)'), ('B02005', 'PRECISION OF TEMPERATURE OBSERVATION                             (K*100)'), ('B02038', 'METHOD OF WATER TEMPERATURE AND/OR SALINITY MEASUREMENT          (CODE TABLE 2038)'), ('B02039', 'METHOD OF WET-BULB TEMPERATURE MEASUREMENT                       (CODE TABLE 2039)'), ('B07030', 'HEIGHT OF STATION GROUND ABOVE MEAN SEA LEVEL (SEE NOTE 3)       (m*10)'), ('B07031', 'HEIGHT OF BAROMETER ABOVE MEAN SEA LEVEL (SEE NOTE 4)            (m*10)')], help_text='A code to define the metadata. See rmap RFC', max_length=6),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='category',
            field=models.CharField(choices=[('good', 'Beautifull & Good'), ('bad', 'Bad & Wrong'), ('test', 'Test & Bugs'), ('unknown', 'Unknown & Missing')], help_text='Category of the station', max_length=50),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='mqttmaintpath',
            field=models.CharField(default='maint', help_text='maint mqtt path for publish', max_length=100),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='mqttrootpath',
            field=models.CharField(default='sample', help_text='root mqtt path for publish', max_length=100),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='name',
            field=models.CharField(default='My station', help_text='station name', max_length=255),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='network',
            field=models.CharField(choices=[('fixed', 'For station with fixed coordinate'), ('mobile', 'For station with mobile coordinate')], default='fixed', help_text='station network', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportamqp',
            name='amqppassword',
            field=models.CharField(blank=True, default='', help_text='AMQP password', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportamqp',
            name='amqpserver',
            field=models.CharField(default='rmap.cc', help_text='AMQP server', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportamqp',
            name='amqpuser',
            field=models.CharField(blank=True, default='', help_text='AMQP user', max_length=9),
        ),
        migrations.AlterField(
            model_name='transportamqp',
            name='exchange',
            field=models.CharField(default='rmap', help_text='AMQP remote exchange name', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportamqp',
            name='queue',
            field=models.CharField(default='rmap', help_text='AMQP local queue name', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportmqtt',
            name='mqttpassword',
            field=models.CharField(blank=True, default='', help_text='MQTT password', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportmqtt',
            name='mqttserver',
            field=models.CharField(default='mqttserver', help_text='MQTT server', max_length=50),
        ),
        migrations.AlterField(
            model_name='transportmqtt',
            name='mqttuser',
            field=models.CharField(blank=True, default='', help_text='MQTT user', max_length=9),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='channel',
            field=models.PositiveIntegerField(choices=[(90, 'RF24 Network node channel 90'), (91, 'RF24 Network node channel 91'), (92, 'RF24 Network node channel 92'), (93, 'RF24 Network node channel 93'), (94, 'RF24 Network node channel 94'), (95, 'RF24 Network node channel 95')], default=93, help_text='Channel number for RF24'),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='iv',
            field=models.CharField(blank=True, choices=[('0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 1'), ('0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 2'), ('0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 3'), ('0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', 'preset 4'), ('0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', 'preset 5'), ('0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', 'preset 6'), ('0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', 'preset 7'), ('0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', 'preset 8'), ('0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', 'preset 9')], help_text='AES cbc iv', max_length=47, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='key',
            field=models.CharField(blank=True, choices=[('0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 1'), ('0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 2'), ('0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 3'), ('0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', 'preset 4'), ('0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', 'preset 5'), ('0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', 'preset 6'), ('0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', 'preset 7'), ('0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', 'preset 8'), ('0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', 'preset 9')], help_text='AES key', max_length=47, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='node',
            field=models.PositiveIntegerField(choices=[(0, 'RF24 Network node 0'), (1, 'RF24 Network node 01'), (2, 'RF24 Network node 02'), (3, 'RF24 Network node 03'), (4, 'RF24 Network node 04'), (5, 'RF24 Network node 05')], default=0, help_text='Node ID for RF24 Network'),
        ),
        migrations.AlterField(
            model_name='transportserial',
            name='baudrate',
            field=models.PositiveIntegerField(choices=[(9600, '9600'), (19200, '19200'), (38400, '38400'), (115200, '115200')], default=9600, help_text='Baud rate'),
        ),
        migrations.AlterField(
            model_name='transportserial',
            name='device',
            field=models.CharField(choices=[('COM1', 'windows COM1'), ('COM2', 'windows COM2'), ('COM3', 'windows COM3'), ('COM4', 'windows COM4'), ('COM5', 'windows COM5'), ('COM6', 'windows COM6'), ('COM7', 'windows COM7'), ('COM8', 'windows COM8'), ('COM9', 'windows COM9'), ('COM10', 'windows COM10'), ('COM11', 'windows COM11'), ('COM12', 'windows COM12'), ('COM13', 'windows COM13'), ('COM14', 'windows COM14'), ('COM15', 'windows COM15'), ('COM16', 'windows COM16'), ('COM17', 'windows COM17'), ('COM18', 'windows COM18'), ('COM19', 'windows COM19'), ('/dev/ttyUSB0', 'Linux ttyUSB0'), ('/dev/ttyUSB1', 'Linux ttyUSB1'), ('/dev/ttyUSB2', 'Linux ttyUSB2'), ('/dev/ttyUSB3', 'Linux ttyUSB3'), ('/dev/ttyUSB4', 'Linux ttyUSB4'), ('/dev/ttyACM0', 'Linux ttyACM0'), ('/dev/ttyACM1', 'Linux ttyACM1'), ('/dev/ttyACM2', 'Linux ttyACM2'), ('/dev/ttyACM3', 'Linux ttyACM3'), ('/dev/ttyACM4', 'Linux ttyACM4'), ('/dev/rfcomm0', 'Linux rfcomm0'), ('/dev/rfcomm1', 'Linux rfcomm1'), ('/dev/rfcomm2', 'Linux rfcomm2'), ('/dev/tty.HC-05-DevB', 'OSX tty.HC-05-DevB'), ('/dev/tty.usbserial', 'OSX tty.usbserial')], default='/dev/ttyUSB0', help_text='Serial device', max_length=30),
        ),
        migrations.AlterField(
            model_name='transporttcpip',
            name='name',
            field=models.CharField(choices=[('master', 'master board 1'), ('master2', 'master board 2'), ('master3', 'master board 3'), ('master4', 'master board 4'), ('stima', 'master stima 1'), ('stima2', 'master stima 2'), ('stima3', 'master stima 3'), ('stima4', 'master stima 4')], default='master', help_text='Name DSN solved (for master board only)', max_length=50),
        ),
        migrations.AlterField(
            model_name='transporttcpip',
            name='ntpserver',
            field=models.CharField(default='ntpserver', help_text='Network time server (NTP)', max_length=50),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='certification',
            field=models.CharField(default='ARPA-ER', max_length=20),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='iv',
            field=models.CharField(blank=True, choices=[('0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 1'), ('0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 2'), ('0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 3'), ('0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', 'preset 4'), ('0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', 'preset 5'), ('0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', 'preset 6'), ('0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', 'preset 7'), ('0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', 'preset 8'), ('0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', 'preset 9')], help_text='AES cbc iv', max_length=47, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.AlterField(
            model_name='transportrf24network',
            name='key',
            field=models.CharField(blank=True, choices=[('0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 1'), ('0,1,1,3,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 2'), ('0,1,2,1,4,5,6,7,8,9,10,11,12,13,14,15', 'preset 3'), ('0,1,2,3,1,5,6,7,8,9,10,11,12,13,14,15', 'preset 4'), ('0,1,2,3,4,1,6,7,8,9,10,11,12,13,14,15', 'preset 5'), ('0,1,2,3,4,5,1,7,8,9,10,11,12,13,14,15', 'preset 6'), ('0,1,2,3,4,5,6,1,8,9,10,11,12,13,14,15', 'preset 7'), ('0,1,2,3,4,5,6,7,1,9,10,11,12,13,14,15', 'preset 8'), ('0,1,2,3,4,5,6,7,8,1,10,11,12,13,14,15', 'preset 9')], help_text='AES key', max_length=47, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.CreateModel(
            name='StationImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, help_text='Activate this station image', verbose_name='Active')),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('station', 'Station description'), ('others', 'Others')], max_length=50)),
                ('image', rmap.stations.models.DeletingImageField(upload_to='stationimage')),
                ('stationmetadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stations.StationMetadata')),
            ],
        ),
        migrations.AddField(
            model_name='transporttcpip',
            name='gsmapn',
            field=models.CharField(default='ibox.tim.it', help_text='APN for gsm access', max_length=50),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='accepted_license',
            field=models.BooleanField(default=False, help_text='You need to accept CC BY 4.0 license to provide your data', verbose_name='I accept CC BY 4.0 license'),
        ),
        migrations.CreateModel(
            name='StationMaintStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('laststatus', models.CharField(blank=True, default='', help_text='Last status', max_length=128)),
                ('lastupdate', models.DateTimeField(blank=True, help_text='Last status update date', null=True)),
                ('station', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.StationMetadata')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='stationmetadata',
            unique_together={('ident', 'lat', 'lon', 'network'), ('slug', 'ident')},
        ),
        migrations.AddField(
            model_name='transportmqtt',
            name='mqttpskkey',
            field=models.CharField(blank=True, default=rmap.stations.models.TransportMqtt.genpskkey, help_text='MQTT PSK Key', max_length=254, null=True),
        ),
        migrations.RunPython(
            code=create_superuser,
            reverse_code=delete_superuser,
        ),
    ]

# Generated by Django 2.2.17 on 2022-07-12 06:40

from django.db import migrations, models
import django.db.models.deletion
from django.core import serializers


import os
fixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))

def load_fixture(apps, schema_editor):
    
    def load_fixture_from_file(fixture_file):
        fixture = open(fixture_file, 'rb')
        objects = serializers.deserialize('json', fixture, ignorenonexistent=True)
        for obj in objects:
            obj.save()
        fixture.close()

    for fixture_filename in ("site_rmap.cc.json",):
        if fixture_filename[-5:] == ".json":
            
            fixture_file = os.path.join(fixture_dir, fixture_filename)
            print("load fixture from file: ",fixture_file)
            load_fixture_from_file(fixture_file)

    fixture_file=fixture_dir+"/sensor_type_01.json"
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    for fixture_filename in os.listdir(fixture_dir):
        if fixture_filename[:3] == "sta" and fixture_filename[-5:] == ".json":
            
            fixture_file = os.path.join(fixture_dir, fixture_filename)
            print("load fixture from file: ",fixture_file)
            load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_02.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_03.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_04.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_05.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_06.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_07.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_08.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    

def unload_fixture(apps, schema_editor):
    "Brutally deleting all entries for this model..."

    MyModel = apps.get_model("stations", "StationMetadata")
    MyModel.objects.all().delete()
    MyModel = apps.get_model("stations", "Board")
    MyModel.objects.all().delete()
    MyModel = apps.get_model("stations", "Sensor")
    MyModel.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('stations', '0007_auto_20220518_2119'),
    ]

    operations = [
        migrations.AlterField(
            model_name='sensor',
            name='address',
            field=models.PositiveIntegerField(default=72, help_text='I2C address (decimal)'),
        ),
        migrations.AlterField(
            model_name='stationmetadata',
            name='network',
            field=models.CharField(default='fixed', help_text='station network ( mobile for station with mobile coordinate)', max_length=50),
        ),
        migrations.CreateModel(
            name='TransportCan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Activate this transport for measurements', verbose_name='Active')),
                ('cansampletime', models.PositiveIntegerField(default=5, help_text='interval in seconds for publish')),
                ('node_id', models.PositiveIntegerField(default=100, help_text='Cyphal node_id')),
                ('subject', models.CharField(default='', help_text='Cyphal subject', max_length=100, null=True)),
                ('subject_id', models.PositiveIntegerField(default=100, help_text='Cyphal subject-ID (decimal)')),
                ('board', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stations.Board')),
            ],
            options={
                'verbose_name': 'CAN transport',
                'verbose_name_plural': 'CAN transport',
                'ordering': ['node_id'],
            },
        ),
        migrations.AlterField(
            model_name='sensor',
            name='driver',
            field=models.CharField(choices=[('CAN', 'INDIRECT Cyphal over CAN-BUS'), ('I2C', 'I2C drivers'), ('RF24', 'RF24 Network jsonrpc'), ('SERI', 'SERIAL drivers over serial port'), ('JRPC', 'INDIRECT jsonrpc over some transport')], default='I2C', help_text='Driver to use', max_length=4),
        ),
        migrations.RunPython(
            code=load_fixture,
            reverse_code=unload_fixture,
        ),        
    ]

# Generated by Django 2.2.17 on 2023-10-06 06:57

from django.db import migrations, models
from django.core import serializers
import os

fixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))


fixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))
#fixture_filename = 'initial_data.json'


def load_fixture(apps, schema_editor):
    
    def load_fixture_from_file(fixture_file):
        fixture = open(fixture_file, 'rb')
        objects = serializers.deserialize('json', fixture, ignorenonexistent=True)
        for obj in objects:
            obj.save()
        fixture.close()

    fixture_file=fixture_dir+"/sensor_type_01.json"
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    for fixture_filename in os.listdir(fixture_dir):
        if fixture_filename[:3] == "sta" and fixture_filename[-5:] == ".json":
            
            fixture_file = os.path.join(fixture_dir, fixture_filename)
            print("load fixture from file: ",fixture_file)
            load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_02.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_03.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_04.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_05.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_06.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_07.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)

    fixture_filename = "sensor_type_08.json"
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)
    load_fixture_from_file(fixture_file)


    fixture_filename = "sensor_type_09.json"

    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)

    fixture = open(fixture_file, 'rb')
    objects = serializers.deserialize('json', fixture, ignorenonexistent=True)
    for obj in objects:
        obj.save()
    fixture.close()

    fixture_filename = "template_stations.json"

    fixture_file = os.path.join(fixture_dir, fixture_filename)
    print("load fixture from file: ",fixture_file)

    fixture = open(fixture_file, 'rb')
    objects = serializers.deserialize('json', fixture, ignorenonexistent=True)
    for obj in objects:
        obj.save()
    fixture.close()



    
    

def unload_fixture(apps, schema_editor):
    "Brutally deleting all entries for this model..."

    MyModel = apps.get_model("stations", "StationMetadata")
    MyModel.objects.all().delete()
    MyModel = apps.get_model("stations", "Board")
    MyModel.objects.all().delete()
    MyModel = apps.get_model("stations", "Sensor")
    MyModel.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('stations', '0036_auto_20230710_0909'),
    ]

    operations = [
        migrations.AddField(
            model_name='stationmetadata',
            name='type',
            field=models.CharField(choices=[('unknown', 'Unknow model'), ('manual', 'Human observer'), ('stimav2', 'Stima version 2'), ('stimav3', 'Stima version 3'), ('stimav4', 'Stima version 4')], default='unknown', help_text='Type of the station', max_length=50),
        ),
        migrations.RunPython(
            code=load_fixture,
            reverse_code=unload_fixture,
        ),                
    ]
